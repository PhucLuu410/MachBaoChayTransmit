
MachBaoChayTuDongTransmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003578  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003684  08003684  00004684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036f4  080036f4  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  080036f4  080036f4  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036f4  080036f4  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036f4  080036f4  000046f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036f8  080036f8  000046f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080036fc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000005c  08003758  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08003758  00005310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb57  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc7  00000000  00000000  00011bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  00013ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4e  00000000  00000000  000148d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001852a  00000000  00000000  0001531e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001013b  00000000  00000000  0002d848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f556  00000000  00000000  0003d983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cced9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  000ccf1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d0b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800366c 	.word	0x0800366c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	0800366c 	.word	0x0800366c

0800014c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fba7 	bl	80008a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f885 	bl	8000264 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f9df 	bl	800051c <MX_GPIO_Init>
	MX_DMA_Init();
 800015e:	f000 f9bf 	bl	80004e0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000162:	f000 f8d7 	bl	8000314 <MX_ADC1_Init>
	MX_TIM1_Init();
 8000166:	f000 f93f 	bl	80003e8 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800016a:	f000 f98f 	bl	800048c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) QuetADC4Kenh, 4);
 800016e:	2204      	movs	r2, #4
 8000170:	4932      	ldr	r1, [pc, #200]	@ (800023c <main+0xf0>)
 8000172:	4833      	ldr	r0, [pc, #204]	@ (8000240 <main+0xf4>)
 8000174:	f000 fcf4 	bl	8000b60 <HAL_ADC_Start_DMA>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		NhietDo = 	(QuetADC4Kenh[0] * 500 / 4095);
 8000178:	4b30      	ldr	r3, [pc, #192]	@ (800023c <main+0xf0>)
 800017a:	881b      	ldrh	r3, [r3, #0]
 800017c:	461a      	mov	r2, r3
 800017e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000182:	fb02 f303 	mul.w	r3, r2, r3
 8000186:	4a2f      	ldr	r2, [pc, #188]	@ (8000244 <main+0xf8>)
 8000188:	fb82 1203 	smull	r1, r2, r2, r3
 800018c:	441a      	add	r2, r3
 800018e:	12d2      	asrs	r2, r2, #11
 8000190:	17db      	asrs	r3, r3, #31
 8000192:	1ad3      	subs	r3, r2, r3
 8000194:	b29a      	uxth	r2, r3
 8000196:	4b2c      	ldr	r3, [pc, #176]	@ (8000248 <main+0xfc>)
 8000198:	801a      	strh	r2, [r3, #0]
		KhiGas 	= 	(QuetADC4Kenh[1] * 100 / 4095);
 800019a:	4b28      	ldr	r3, [pc, #160]	@ (800023c <main+0xf0>)
 800019c:	885b      	ldrh	r3, [r3, #2]
 800019e:	461a      	mov	r2, r3
 80001a0:	2364      	movs	r3, #100	@ 0x64
 80001a2:	fb02 f303 	mul.w	r3, r2, r3
 80001a6:	4a27      	ldr	r2, [pc, #156]	@ (8000244 <main+0xf8>)
 80001a8:	fb82 1203 	smull	r1, r2, r2, r3
 80001ac:	441a      	add	r2, r3
 80001ae:	12d2      	asrs	r2, r2, #11
 80001b0:	17db      	asrs	r3, r3, #31
 80001b2:	1ad3      	subs	r3, r2, r3
 80001b4:	b29a      	uxth	r2, r3
 80001b6:	4b25      	ldr	r3, [pc, #148]	@ (800024c <main+0x100>)
 80001b8:	801a      	strh	r2, [r3, #0]
		Khoi 	= 	((QuetADC4Kenh[2]) * 100 / 4095);
 80001ba:	4b20      	ldr	r3, [pc, #128]	@ (800023c <main+0xf0>)
 80001bc:	889b      	ldrh	r3, [r3, #4]
 80001be:	461a      	mov	r2, r3
 80001c0:	2364      	movs	r3, #100	@ 0x64
 80001c2:	fb02 f303 	mul.w	r3, r2, r3
 80001c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000244 <main+0xf8>)
 80001c8:	fb82 1203 	smull	r1, r2, r2, r3
 80001cc:	441a      	add	r2, r3
 80001ce:	12d2      	asrs	r2, r2, #11
 80001d0:	17db      	asrs	r3, r3, #31
 80001d2:	1ad3      	subs	r3, r2, r3
 80001d4:	b29a      	uxth	r2, r3
 80001d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000250 <main+0x104>)
 80001d8:	801a      	strh	r2, [r3, #0]
		Lua 	= 	((4095 - QuetADC4Kenh[3]) * 100 / 4095);
 80001da:	4b18      	ldr	r3, [pc, #96]	@ (800023c <main+0xf0>)
 80001dc:	88db      	ldrh	r3, [r3, #6]
 80001de:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80001e2:	330f      	adds	r3, #15
 80001e4:	2264      	movs	r2, #100	@ 0x64
 80001e6:	fb02 f303 	mul.w	r3, r2, r3
 80001ea:	4a16      	ldr	r2, [pc, #88]	@ (8000244 <main+0xf8>)
 80001ec:	fb82 1203 	smull	r1, r2, r2, r3
 80001f0:	441a      	add	r2, r3
 80001f2:	12d2      	asrs	r2, r2, #11
 80001f4:	17db      	asrs	r3, r3, #31
 80001f6:	1ad3      	subs	r3, r2, r3
 80001f8:	b29a      	uxth	r2, r3
 80001fa:	4b16      	ldr	r3, [pc, #88]	@ (8000254 <main+0x108>)
 80001fc:	801a      	strh	r2, [r3, #0]
		sprintf(MangKiTuGuiDi, "s%d %d %d %d\n", NhietDo, Khoi, KhiGas, Lua);
 80001fe:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <main+0xfc>)
 8000200:	881b      	ldrh	r3, [r3, #0]
 8000202:	4619      	mov	r1, r3
 8000204:	4b12      	ldr	r3, [pc, #72]	@ (8000250 <main+0x104>)
 8000206:	881b      	ldrh	r3, [r3, #0]
 8000208:	4618      	mov	r0, r3
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <main+0x100>)
 800020c:	881b      	ldrh	r3, [r3, #0]
 800020e:	461a      	mov	r2, r3
 8000210:	4b10      	ldr	r3, [pc, #64]	@ (8000254 <main+0x108>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	9200      	str	r2, [sp, #0]
 8000218:	4603      	mov	r3, r0
 800021a:	460a      	mov	r2, r1
 800021c:	490e      	ldr	r1, [pc, #56]	@ (8000258 <main+0x10c>)
 800021e:	480f      	ldr	r0, [pc, #60]	@ (800025c <main+0x110>)
 8000220:	f002 fd74 	bl	8002d0c <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) MangKiTuGuiDi,sizeof(MangKiTuGuiDi), HAL_MAX_DELAY);
 8000224:	f04f 33ff 	mov.w	r3, #4294967295
 8000228:	2232      	movs	r2, #50	@ 0x32
 800022a:	490c      	ldr	r1, [pc, #48]	@ (800025c <main+0x110>)
 800022c:	480c      	ldr	r0, [pc, #48]	@ (8000260 <main+0x114>)
 800022e:	f002 fb99 	bl	8002964 <HAL_UART_Transmit>
		HAL_Delay(50);
 8000232:	2032      	movs	r0, #50	@ 0x32
 8000234:	f000 fb98 	bl	8000968 <HAL_Delay>
		NhietDo = 	(QuetADC4Kenh[0] * 500 / 4095);
 8000238:	bf00      	nop
 800023a:	e79d      	b.n	8000178 <main+0x2c>
 800023c:	20000184 	.word	0x20000184
 8000240:	20000078 	.word	0x20000078
 8000244:	80080081 	.word	0x80080081
 8000248:	2000017c 	.word	0x2000017c
 800024c:	20000180 	.word	0x20000180
 8000250:	2000017e 	.word	0x2000017e
 8000254:	20000182 	.word	0x20000182
 8000258:	08003684 	.word	0x08003684
 800025c:	2000018c 	.word	0x2000018c
 8000260:	20000134 	.word	0x20000134

08000264 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b094      	sub	sp, #80	@ 0x50
 8000268:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800026a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800026e:	2228      	movs	r2, #40	@ 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f002 fd6a 	bl	8002d4c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000278:	f107 0314 	add.w	r3, r7, #20
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
 8000284:	60da      	str	r2, [r3, #12]
 8000286:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000294:	2302      	movs	r3, #2
 8000296:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	2310      	movs	r3, #16
 800029e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	2302      	movs	r3, #2
 80002a2:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002a4:	2300      	movs	r3, #0
 80002a6:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 fbc8 	bl	8001a48 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x5e>
	{
		Error_Handler();
 80002be:	f000 f94f 	bl	8000560 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c6:	2302      	movs	r3, #2
 80002c8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002d2:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d4:	2300      	movs	r3, #0
 80002d6:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002d8:	f107 0314 	add.w	r3, r7, #20
 80002dc:	2101      	movs	r1, #1
 80002de:	4618      	mov	r0, r3
 80002e0:	f001 fe34 	bl	8001f4c <HAL_RCC_ClockConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x8a>
	{
		Error_Handler();
 80002ea:	f000 f939 	bl	8000560 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ee:	2302      	movs	r3, #2
 80002f0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002f6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 ffb4 	bl	8002268 <HAL_RCCEx_PeriphCLKConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0xa6>
	{
		Error_Handler();
 8000306:	f000 f92b 	bl	8000560 <Error_Handler>
	}
}
 800030a:	bf00      	nop
 800030c:	3750      	adds	r7, #80	@ 0x50
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig =
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	605a      	str	r2, [r3, #4]
 8000322:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000324:	4b2e      	ldr	r3, [pc, #184]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000326:	4a2f      	ldr	r2, [pc, #188]	@ (80003e4 <MX_ADC1_Init+0xd0>)
 8000328:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800032a:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 800032c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000330:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000332:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000334:	2201      	movs	r2, #1
 8000336:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000338:	4b29      	ldr	r3, [pc, #164]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 800033a:	2200      	movs	r2, #0
 800033c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000340:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000344:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000346:	4b26      	ldr	r3, [pc, #152]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000348:	2200      	movs	r2, #0
 800034a:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 800034c:	4b24      	ldr	r3, [pc, #144]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 800034e:	2204      	movs	r2, #4
 8000350:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000352:	4823      	ldr	r0, [pc, #140]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000354:	f000 fb2c 	bl	80009b0 <HAL_ADC_Init>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 800035e:	f000 f8ff 	bl	8000560 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000362:	2301      	movs	r3, #1
 8000364:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000366:	2301      	movs	r3, #1
 8000368:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800036a:	2307      	movs	r3, #7
 800036c:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	4619      	mov	r1, r3
 8000372:	481b      	ldr	r0, [pc, #108]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000374:	f000 fcee 	bl	8000d54 <HAL_ADC_ConfigChannel>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 800037e:	f000 f8ef 	bl	8000560 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8000382:	2302      	movs	r3, #2
 8000384:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000386:	2302      	movs	r3, #2
 8000388:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4814      	ldr	r0, [pc, #80]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 8000390:	f000 fce0 	bl	8000d54 <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 800039a:	f000 f8e1 	bl	8000560 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800039e:	2303      	movs	r3, #3
 80003a0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80003a2:	2303      	movs	r3, #3
 80003a4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4619      	mov	r1, r3
 80003aa:	480d      	ldr	r0, [pc, #52]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 80003ac:	f000 fcd2 	bl	8000d54 <HAL_ADC_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 80003b6:	f000 f8d3 	bl	8000560 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 80003ba:	2304      	movs	r3, #4
 80003bc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 80003be:	2304      	movs	r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	4806      	ldr	r0, [pc, #24]	@ (80003e0 <MX_ADC1_Init+0xcc>)
 80003c8:	f000 fcc4 	bl	8000d54 <HAL_ADC_ConfigChannel>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 80003d2:	f000 f8c5 	bl	8000560 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000078 	.word	0x20000078
 80003e4:	40012400 	.word	0x40012400

080003e8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 80003ee:	f107 0308 	add.w	r3, r7, #8
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 80003fc:	463b      	mov	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
	{ 0 };

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000404:	4b1f      	ldr	r3, [pc, #124]	@ (8000484 <MX_TIM1_Init+0x9c>)
 8000406:	4a20      	ldr	r2, [pc, #128]	@ (8000488 <MX_TIM1_Init+0xa0>)
 8000408:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8000;
 800040a:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <MX_TIM1_Init+0x9c>)
 800040c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000410:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000412:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <MX_TIM1_Init+0x9c>)
 8000414:	2200      	movs	r2, #0
 8000416:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8000418:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_TIM1_Init+0x9c>)
 800041a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800041e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000420:	4b18      	ldr	r3, [pc, #96]	@ (8000484 <MX_TIM1_Init+0x9c>)
 8000422:	2200      	movs	r2, #0
 8000424:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_TIM1_Init+0x9c>)
 8000428:	2200      	movs	r2, #0
 800042a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_TIM1_Init+0x9c>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000432:	4814      	ldr	r0, [pc, #80]	@ (8000484 <MX_TIM1_Init+0x9c>)
 8000434:	f001 ffce 	bl	80023d4 <HAL_TIM_Base_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 800043e:	f000 f88f 	bl	8000560 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000446:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4619      	mov	r1, r3
 800044e:	480d      	ldr	r0, [pc, #52]	@ (8000484 <MX_TIM1_Init+0x9c>)
 8000450:	f002 f80f 	bl	8002472 <HAL_TIM_ConfigClockSource>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 800045a:	f000 f881 	bl	8000560 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045e:	2300      	movs	r3, #0
 8000460:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000466:	463b      	mov	r3, r7
 8000468:	4619      	mov	r1, r3
 800046a:	4806      	ldr	r0, [pc, #24]	@ (8000484 <MX_TIM1_Init+0x9c>)
 800046c:	f002 f9cc 	bl	8002808 <HAL_TIMEx_MasterConfigSynchronization>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM1_Init+0x92>
	{
		Error_Handler();
 8000476:	f000 f873 	bl	8000560 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	200000ec 	.word	0x200000ec
 8000488:	40012c00 	.word	0x40012c00

0800048c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 8000492:	4a12      	ldr	r2, [pc, #72]	@ (80004dc <MX_USART1_UART_Init+0x50>)
 8000494:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000496:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 8000498:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800049c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b09      	ldr	r3, [pc, #36]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b06      	ldr	r3, [pc, #24]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	@ (80004d8 <MX_USART1_UART_Init+0x4c>)
 80004c4:	f002 f9fe 	bl	80028c4 <HAL_UART_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80004ce:	f000 f847 	bl	8000560 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000134 	.word	0x20000134
 80004dc:	40013800 	.word	0x40013800

080004e0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80004e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000518 <MX_DMA_Init+0x38>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000518 <MX_DMA_Init+0x38>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6153      	str	r3, [r2, #20]
 80004f2:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <MX_DMA_Init+0x38>)
 80004f4:	695b      	ldr	r3, [r3, #20]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	200b      	movs	r0, #11
 8000504:	f000 fef7 	bl	80012f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000508:	200b      	movs	r0, #11
 800050a:	f000 ff10 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000

0800051c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <MX_GPIO_Init+0x40>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a0d      	ldr	r2, [pc, #52]	@ (800055c <MX_GPIO_Init+0x40>)
 8000528:	f043 0320 	orr.w	r3, r3, #32
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <MX_GPIO_Init+0x40>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0320 	and.w	r3, r3, #32
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <MX_GPIO_Init+0x40>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a07      	ldr	r2, [pc, #28]	@ (800055c <MX_GPIO_Init+0x40>)
 8000540:	f043 0304 	orr.w	r3, r3, #4
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b05      	ldr	r3, [pc, #20]	@ (800055c <MX_GPIO_Init+0x40>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0304 	and.w	r3, r3, #4
 800054e:	603b      	str	r3, [r7, #0]
 8000550:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000

08000560 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <Error_Handler+0x8>

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x5c>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b0c      	ldr	r3, [pc, #48]	@ (80005c8 <HAL_MspInit+0x5c>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_MspInit+0x60>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <HAL_MspInit+0x60>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0310 	add.w	r3, r7, #16
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a28      	ldr	r2, [pc, #160]	@ (800068c <HAL_ADC_MspInit+0xbc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d149      	bne.n	8000684 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <HAL_ADC_MspInit+0xc0>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	4a26      	ldr	r2, [pc, #152]	@ (8000690 <HAL_ADC_MspInit+0xc0>)
 80005f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005fa:	6193      	str	r3, [r2, #24]
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <HAL_ADC_MspInit+0xc0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000604:	60fb      	str	r3, [r7, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b21      	ldr	r3, [pc, #132]	@ (8000690 <HAL_ADC_MspInit+0xc0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <HAL_ADC_MspInit+0xc0>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <HAL_ADC_MspInit+0xc0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000620:	231e      	movs	r3, #30
 8000622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000624:	2303      	movs	r3, #3
 8000626:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4819      	ldr	r0, [pc, #100]	@ (8000694 <HAL_ADC_MspInit+0xc4>)
 8000630:	f001 f886 	bl	8001740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 8000636:	4a19      	ldr	r2, [pc, #100]	@ (800069c <HAL_ADC_MspInit+0xcc>)
 8000638:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063a:	4b17      	ldr	r3, [pc, #92]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 800063c:	2200      	movs	r2, #0
 800063e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000640:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000646:	4b14      	ldr	r3, [pc, #80]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 8000648:	2280      	movs	r2, #128	@ 0x80
 800064a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 800064e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000652:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 8000656:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800065a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800065c:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 800065e:	2220      	movs	r2, #32
 8000660:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000662:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 8000664:	2200      	movs	r2, #0
 8000666:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000668:	480b      	ldr	r0, [pc, #44]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 800066a:	f000 fe7b 	bl	8001364 <HAL_DMA_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000674:	f7ff ff74 	bl	8000560 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 800067c:	621a      	str	r2, [r3, #32]
 800067e:	4a06      	ldr	r2, [pc, #24]	@ (8000698 <HAL_ADC_MspInit+0xc8>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000684:	bf00      	nop
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40012400 	.word	0x40012400
 8000690:	40021000 	.word	0x40021000
 8000694:	40010800 	.word	0x40010800
 8000698:	200000a8 	.word	0x200000a8
 800069c:	40020008 	.word	0x40020008

080006a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a09      	ldr	r2, [pc, #36]	@ (80006d4 <HAL_TIM_Base_MspInit+0x34>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d10b      	bne.n	80006ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	@ (80006d8 <HAL_TIM_Base_MspInit+0x38>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <HAL_TIM_Base_MspInit+0x38>)
 80006b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006bc:	6193      	str	r3, [r2, #24]
 80006be:	4b06      	ldr	r3, [pc, #24]	@ (80006d8 <HAL_TIM_Base_MspInit+0x38>)
 80006c0:	699b      	ldr	r3, [r3, #24]
 80006c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40012c00 	.word	0x40012c00
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0310 	add.w	r3, r7, #16
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <HAL_UART_MspInit+0x8c>)
 80006f8:	4293      	cmp	r3, r2
 80006fa:	d131      	bne.n	8000760 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <HAL_UART_MspInit+0x90>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a1a      	ldr	r2, [pc, #104]	@ (800076c <HAL_UART_MspInit+0x90>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000706:	6193      	str	r3, [r2, #24]
 8000708:	4b18      	ldr	r3, [pc, #96]	@ (800076c <HAL_UART_MspInit+0x90>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000714:	4b15      	ldr	r3, [pc, #84]	@ (800076c <HAL_UART_MspInit+0x90>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a14      	ldr	r2, [pc, #80]	@ (800076c <HAL_UART_MspInit+0x90>)
 800071a:	f043 0304 	orr.w	r3, r3, #4
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_UART_MspInit+0x90>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	f003 0304 	and.w	r3, r3, #4
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800072c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000730:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000732:	2302      	movs	r3, #2
 8000734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000736:	2303      	movs	r3, #3
 8000738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	4619      	mov	r1, r3
 8000740:	480b      	ldr	r0, [pc, #44]	@ (8000770 <HAL_UART_MspInit+0x94>)
 8000742:	f000 fffd 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000746:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800074a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000754:	f107 0310 	add.w	r3, r7, #16
 8000758:	4619      	mov	r1, r3
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <HAL_UART_MspInit+0x94>)
 800075c:	f000 fff0 	bl	8001740 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000760:	bf00      	nop
 8000762:	3720      	adds	r7, #32
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40013800 	.word	0x40013800
 800076c:	40021000 	.word	0x40021000
 8000770:	40010800 	.word	0x40010800

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <UsageFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f8b4 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <DMA1_Channel1_IRQHandler+0x10>)
 80007d2:	f000 fe81 	bl	80014d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200000a8 	.word	0x200000a8

080007e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e8:	4a14      	ldr	r2, [pc, #80]	@ (800083c <_sbrk+0x5c>)
 80007ea:	4b15      	ldr	r3, [pc, #84]	@ (8000840 <_sbrk+0x60>)
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007f4:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <_sbrk+0x64>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <_sbrk+0x64>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <_sbrk+0x68>)
 8000800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <_sbrk+0x64>)
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4413      	add	r3, r2
 800080a:	693a      	ldr	r2, [r7, #16]
 800080c:	429a      	cmp	r2, r3
 800080e:	d207      	bcs.n	8000820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000810:	f002 faa4 	bl	8002d5c <__errno>
 8000814:	4603      	mov	r3, r0
 8000816:	220c      	movs	r2, #12
 8000818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	e009      	b.n	8000834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000820:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <_sbrk+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000826:	4b07      	ldr	r3, [pc, #28]	@ (8000844 <_sbrk+0x64>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	4a05      	ldr	r2, [pc, #20]	@ (8000844 <_sbrk+0x64>)
 8000830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20005000 	.word	0x20005000
 8000840:	00000400 	.word	0x00000400
 8000844:	200001c0 	.word	0x200001c0
 8000848:	20000310 	.word	0x20000310

0800084c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000858:	f7ff fff8 	bl	800084c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480b      	ldr	r0, [pc, #44]	@ (800088c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800085e:	490c      	ldr	r1, [pc, #48]	@ (8000890 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000860:	4a0c      	ldr	r2, [pc, #48]	@ (8000894 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000874:	4c09      	ldr	r4, [pc, #36]	@ (800089c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000882:	f002 fa71 	bl	8002d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000886:	f7ff fc61 	bl	800014c <main>
  bx lr
 800088a:	4770      	bx	lr
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000894:	080036fc 	.word	0x080036fc
  ldr r2, =_sbss
 8000898:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800089c:	20000310 	.word	0x20000310

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <HAL_Init+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <HAL_Init+0x28>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 fd13 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff fe54 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	@ (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fd2b 	bl	800134a <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 fcf3 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	@ (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000000 	.word	0x20000000
 8000928:	20000008 	.word	0x20000008
 800092c:	20000004 	.word	0x20000004

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	@ (800094c <HAL_IncTick+0x1c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <HAL_IncTick+0x20>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a03      	ldr	r2, [pc, #12]	@ (8000950 <HAL_IncTick+0x20>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000008 	.word	0x20000008
 8000950:	200001c4 	.word	0x200001c4

08000954 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;
 8000958:	4b02      	ldr	r3, [pc, #8]	@ (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	200001c4 	.word	0x200001c4

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff fff0 	bl	8000954 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffe0 	bl	8000954 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008

080009b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009b8:	2300      	movs	r3, #0
 80009ba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d101      	bne.n	80009d2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e0be      	b.n	8000b50 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d109      	bne.n	80009f4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2200      	movs	r2, #0
 80009ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff fdee 	bl	80005d0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f000 faff 	bl	8000ff8 <ADC_ConversionStop_Disable>
 80009fa:	4603      	mov	r3, r0
 80009fc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f040 8099 	bne.w	8000b3e <HAL_ADC_Init+0x18e>
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f040 8095 	bne.w	8000b3e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a18:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000a1c:	f023 0302 	bic.w	r3, r3, #2
 8000a20:	f043 0202 	orr.w	r2, r3, #2
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7b1b      	ldrb	r3, [r3, #12]
 8000a36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a48:	d003      	beq.n	8000a52 <HAL_ADC_Init+0xa2>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d102      	bne.n	8000a58 <HAL_ADC_Init+0xa8>
 8000a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a56:	e000      	b.n	8000a5a <HAL_ADC_Init+0xaa>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7d1b      	ldrb	r3, [r3, #20]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d119      	bne.n	8000a9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7b1b      	ldrb	r3, [r3, #12]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d109      	bne.n	8000a84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	699b      	ldr	r3, [r3, #24]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	035a      	lsls	r2, r3, #13
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	e00b      	b.n	8000a9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a88:	f043 0220 	orr.w	r2, r3, #32
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a94:	f043 0201 	orr.w	r2, r3, #1
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	430a      	orrs	r2, r1
 8000aae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689a      	ldr	r2, [r3, #8]
 8000ab6:	4b28      	ldr	r3, [pc, #160]	@ (8000b58 <HAL_ADC_Init+0x1a8>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	689b      	ldr	r3, [r3, #8]
 8000ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000acc:	d003      	beq.n	8000ad6 <HAL_ADC_Init+0x126>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d104      	bne.n	8000ae0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	691b      	ldr	r3, [r3, #16]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	051b      	lsls	r3, r3, #20
 8000ade:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	430a      	orrs	r2, r1
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <HAL_ADC_Init+0x1ac>)
 8000afc:	4013      	ands	r3, r2
 8000afe:	68ba      	ldr	r2, [r7, #8]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d10b      	bne.n	8000b1c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2200      	movs	r2, #0
 8000b08:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b0e:	f023 0303 	bic.w	r3, r3, #3
 8000b12:	f043 0201 	orr.w	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b1a:	e018      	b.n	8000b4e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b20:	f023 0312 	bic.w	r3, r3, #18
 8000b24:	f043 0210 	orr.w	r2, r3, #16
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b30:	f043 0201 	orr.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b3c:	e007      	b.n	8000b4e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b42:	f043 0210 	orr.w	r2, r3, #16
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	ffe1f7fd 	.word	0xffe1f7fd
 8000b5c:	ff1f0efe 	.word	0xff1f0efe

08000b60 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a64      	ldr	r2, [pc, #400]	@ (8000d08 <HAL_ADC_Start_DMA+0x1a8>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d004      	beq.n	8000b84 <HAL_ADC_Start_DMA+0x24>
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a63      	ldr	r2, [pc, #396]	@ (8000d0c <HAL_ADC_Start_DMA+0x1ac>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d106      	bne.n	8000b92 <HAL_ADC_Start_DMA+0x32>
 8000b84:	4b60      	ldr	r3, [pc, #384]	@ (8000d08 <HAL_ADC_Start_DMA+0x1a8>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f040 80b3 	bne.w	8000cf8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d101      	bne.n	8000ba0 <HAL_ADC_Start_DMA+0x40>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e0ae      	b.n	8000cfe <HAL_ADC_Start_DMA+0x19e>
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ba8:	68f8      	ldr	r0, [r7, #12]
 8000baa:	f000 f9cb 	bl	8000f44 <ADC_Enable>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000bb2:	7dfb      	ldrb	r3, [r7, #23]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 809a 	bne.w	8000cee <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8000d0c <HAL_ADC_Start_DMA+0x1ac>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d105      	bne.n	8000be4 <HAL_ADC_Start_DMA+0x84>
 8000bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8000d08 <HAL_ADC_Start_DMA+0x1a8>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d115      	bne.n	8000c10 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d026      	beq.n	8000c4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c0e:	e01d      	b.n	8000c4c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c14:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a39      	ldr	r2, [pc, #228]	@ (8000d08 <HAL_ADC_Start_DMA+0x1a8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d004      	beq.n	8000c30 <HAL_ADC_Start_DMA+0xd0>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a38      	ldr	r2, [pc, #224]	@ (8000d0c <HAL_ADC_Start_DMA+0x1ac>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d10d      	bne.n	8000c4c <HAL_ADC_Start_DMA+0xec>
 8000c30:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <HAL_ADC_Start_DMA+0x1a8>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d007      	beq.n	8000c4c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c40:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c44:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d006      	beq.n	8000c66 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5c:	f023 0206 	bic.w	r2, r3, #6
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c64:	e002      	b.n	8000c6c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	4a25      	ldr	r2, [pc, #148]	@ (8000d10 <HAL_ADC_Start_DMA+0x1b0>)
 8000c7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	4a24      	ldr	r2, [pc, #144]	@ (8000d14 <HAL_ADC_Start_DMA+0x1b4>)
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <HAL_ADC_Start_DMA+0x1b8>)
 8000c8a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f06f 0202 	mvn.w	r2, #2
 8000c94:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ca4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6a18      	ldr	r0, [r3, #32]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	334c      	adds	r3, #76	@ 0x4c
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f000 fbaf 	bl	8001418 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000cc4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cc8:	d108      	bne.n	8000cdc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689a      	ldr	r2, [r3, #8]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000cd8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cda:	e00f      	b.n	8000cfc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000cea:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000cec:	e006      	b.n	8000cfc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000cf6:	e001      	b.n	8000cfc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40012400 	.word	0x40012400
 8000d0c:	40012800 	.word	0x40012800
 8000d10:	0800107b 	.word	0x0800107b
 8000d14:	080010f7 	.word	0x080010f7
 8000d18:	08001113 	.word	0x08001113

08000d1c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d24:	bf00      	nop
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d101      	bne.n	8000d74 <HAL_ADC_ConfigChannel+0x20>
 8000d70:	2302      	movs	r3, #2
 8000d72:	e0dc      	b.n	8000f2e <HAL_ADC_ConfigChannel+0x1da>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2201      	movs	r2, #1
 8000d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b06      	cmp	r3, #6
 8000d82:	d81c      	bhi.n	8000dbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	3b05      	subs	r3, #5
 8000d96:	221f      	movs	r2, #31
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4019      	ands	r1, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	3b05      	subs	r3, #5
 8000db0:	fa00 f203 	lsl.w	r2, r0, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dbc:	e03c      	b.n	8000e38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b0c      	cmp	r3, #12
 8000dc4:	d81c      	bhi.n	8000e00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	3b23      	subs	r3, #35	@ 0x23
 8000dd8:	221f      	movs	r2, #31
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4019      	ands	r1, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	6818      	ldr	r0, [r3, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	4613      	mov	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	4413      	add	r3, r2
 8000df0:	3b23      	subs	r3, #35	@ 0x23
 8000df2:	fa00 f203 	lsl.w	r2, r0, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dfe:	e01b      	b.n	8000e38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	3b41      	subs	r3, #65	@ 0x41
 8000e12:	221f      	movs	r2, #31
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	4019      	ands	r1, r3
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	4413      	add	r3, r2
 8000e2a:	3b41      	subs	r3, #65	@ 0x41
 8000e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	430a      	orrs	r2, r1
 8000e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b09      	cmp	r3, #9
 8000e3e:	d91c      	bls.n	8000e7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68d9      	ldr	r1, [r3, #12]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	3b1e      	subs	r3, #30
 8000e52:	2207      	movs	r2, #7
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6898      	ldr	r0, [r3, #8]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b1e      	subs	r3, #30
 8000e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	e019      	b.n	8000eae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6919      	ldr	r1, [r3, #16]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4613      	mov	r3, r2
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	2207      	movs	r2, #7
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	4019      	ands	r1, r3
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	6898      	ldr	r0, [r3, #8]
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b10      	cmp	r3, #16
 8000eb4:	d003      	beq.n	8000ebe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eba:	2b11      	cmp	r3, #17
 8000ebc:	d132      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f38 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d125      	bne.n	8000f14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d126      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000ee4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d11a      	bne.n	8000f24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <HAL_ADC_ConfigChannel+0x1e8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a13      	ldr	r2, [pc, #76]	@ (8000f40 <HAL_ADC_ConfigChannel+0x1ec>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9a      	lsrs	r2, r3, #18
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f04:	e002      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f9      	bne.n	8000f06 <HAL_ADC_ConfigChannel+0x1b2>
 8000f12:	e007      	b.n	8000f24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f18:	f043 0220 	orr.w	r2, r3, #32
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40012400 	.word	0x40012400
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	431bde83 	.word	0x431bde83

08000f44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d040      	beq.n	8000fe4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f042 0201 	orr.w	r2, r2, #1
 8000f70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f72:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <ADC_Enable+0xac>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff4 <ADC_Enable+0xb0>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	0c9b      	lsrs	r3, r3, #18
 8000f7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f80:	e002      	b.n	8000f88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f9      	bne.n	8000f82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f8e:	f7ff fce1 	bl	8000954 <HAL_GetTick>
 8000f92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f94:	e01f      	b.n	8000fd6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f96:	f7ff fcdd 	bl	8000954 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d918      	bls.n	8000fd6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d011      	beq.n	8000fd6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb6:	f043 0210 	orr.w	r2, r3, #16
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc2:	f043 0201 	orr.w	r2, r3, #1
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e007      	b.n	8000fe6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d1d8      	bne.n	8000f96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b01      	cmp	r3, #1
 8001010:	d12e      	bne.n	8001070 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0201 	bic.w	r2, r2, #1
 8001020:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001022:	f7ff fc97 	bl	8000954 <HAL_GetTick>
 8001026:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001028:	e01b      	b.n	8001062 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800102a:	f7ff fc93 	bl	8000954 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d914      	bls.n	8001062 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d10d      	bne.n	8001062 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104a:	f043 0210 	orr.w	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001056:	f043 0201 	orr.w	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e007      	b.n	8001072 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	2b01      	cmp	r3, #1
 800106e:	d0dc      	beq.n	800102a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001086:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800108c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001090:	2b00      	cmp	r3, #0
 8001092:	d127      	bne.n	80010e4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001098:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80010aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80010ae:	d115      	bne.n	80010dc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d105      	bne.n	80010dc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d4:	f043 0201 	orr.w	r2, r3, #1
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff fe1d 	bl	8000d1c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80010e2:	e004      	b.n	80010ee <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	4798      	blx	r3
}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001102:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff fe12 	bl	8000d2e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001124:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	f043 0204 	orr.w	r2, r3, #4
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f7ff fe01 	bl	8000d40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	@ (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4906      	ldr	r1, [pc, #24]	@ (80011e0 <__NVIC_EnableIRQ+0x34>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff90 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff2d 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff42 	bl	8001190 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff35 	bl	80011ac <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e043      	b.n	8001402 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b22      	ldr	r3, [pc, #136]	@ (800140c <HAL_DMA_Init+0xa8>)
 8001382:	4413      	add	r3, r2
 8001384:	4a22      	ldr	r2, [pc, #136]	@ (8001410 <HAL_DMA_Init+0xac>)
 8001386:	fba2 2303 	umull	r2, r3, r2, r3
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	009a      	lsls	r2, r3, #2
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1f      	ldr	r2, [pc, #124]	@ (8001414 <HAL_DMA_Init+0xb0>)
 8001396:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80013ae:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80013b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013dc:	68fa      	ldr	r2, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	bffdfff8 	.word	0xbffdfff8
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	40020000 	.word	0x40020000

08001418 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_DMA_Start_IT+0x20>
 8001434:	2302      	movs	r3, #2
 8001436:	e04b      	b.n	80014d0 <HAL_DMA_Start_IT+0xb8>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2201      	movs	r2, #1
 800143c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b01      	cmp	r3, #1
 800144a:	d13a      	bne.n	80014c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2202      	movs	r2, #2
 8001450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0201 	bic.w	r2, r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	68b9      	ldr	r1, [r7, #8]
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f000 f937 	bl	80016e4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147a:	2b00      	cmp	r3, #0
 800147c:	d008      	beq.n	8001490 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f042 020e 	orr.w	r2, r2, #14
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	e00f      	b.n	80014b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 0204 	bic.w	r2, r2, #4
 800149e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f042 020a 	orr.w	r2, r2, #10
 80014ae:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e005      	b.n	80014ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014ca:	2302      	movs	r3, #2
 80014cc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f4:	2204      	movs	r2, #4
 80014f6:	409a      	lsls	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4013      	ands	r3, r2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d04f      	beq.n	80015a0 <HAL_DMA_IRQHandler+0xc8>
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	2b00      	cmp	r3, #0
 8001508:	d04a      	beq.n	80015a0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	2b00      	cmp	r3, #0
 8001516:	d107      	bne.n	8001528 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0204 	bic.w	r2, r2, #4
 8001526:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a66      	ldr	r2, [pc, #408]	@ (80016c8 <HAL_DMA_IRQHandler+0x1f0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d029      	beq.n	8001586 <HAL_DMA_IRQHandler+0xae>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a65      	ldr	r2, [pc, #404]	@ (80016cc <HAL_DMA_IRQHandler+0x1f4>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d022      	beq.n	8001582 <HAL_DMA_IRQHandler+0xaa>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a63      	ldr	r2, [pc, #396]	@ (80016d0 <HAL_DMA_IRQHandler+0x1f8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01a      	beq.n	800157c <HAL_DMA_IRQHandler+0xa4>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a62      	ldr	r2, [pc, #392]	@ (80016d4 <HAL_DMA_IRQHandler+0x1fc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d012      	beq.n	8001576 <HAL_DMA_IRQHandler+0x9e>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a60      	ldr	r2, [pc, #384]	@ (80016d8 <HAL_DMA_IRQHandler+0x200>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d00a      	beq.n	8001570 <HAL_DMA_IRQHandler+0x98>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5f      	ldr	r2, [pc, #380]	@ (80016dc <HAL_DMA_IRQHandler+0x204>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d102      	bne.n	800156a <HAL_DMA_IRQHandler+0x92>
 8001564:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001568:	e00e      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 800156a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800156e:	e00b      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001570:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001574:	e008      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001576:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800157a:	e005      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 800157c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001580:	e002      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001582:	2340      	movs	r3, #64	@ 0x40
 8001584:	e000      	b.n	8001588 <HAL_DMA_IRQHandler+0xb0>
 8001586:	2304      	movs	r3, #4
 8001588:	4a55      	ldr	r2, [pc, #340]	@ (80016e0 <HAL_DMA_IRQHandler+0x208>)
 800158a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8094 	beq.w	80016be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800159e:	e08e      	b.n	80016be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	2202      	movs	r2, #2
 80015a6:	409a      	lsls	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d056      	beq.n	800165e <HAL_DMA_IRQHandler+0x186>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d051      	beq.n	800165e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d10b      	bne.n	80015e0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 020a 	bic.w	r2, r2, #10
 80015d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a38      	ldr	r2, [pc, #224]	@ (80016c8 <HAL_DMA_IRQHandler+0x1f0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d029      	beq.n	800163e <HAL_DMA_IRQHandler+0x166>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a37      	ldr	r2, [pc, #220]	@ (80016cc <HAL_DMA_IRQHandler+0x1f4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d022      	beq.n	800163a <HAL_DMA_IRQHandler+0x162>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a35      	ldr	r2, [pc, #212]	@ (80016d0 <HAL_DMA_IRQHandler+0x1f8>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d01a      	beq.n	8001634 <HAL_DMA_IRQHandler+0x15c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a34      	ldr	r2, [pc, #208]	@ (80016d4 <HAL_DMA_IRQHandler+0x1fc>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d012      	beq.n	800162e <HAL_DMA_IRQHandler+0x156>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a32      	ldr	r2, [pc, #200]	@ (80016d8 <HAL_DMA_IRQHandler+0x200>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d00a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x150>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a31      	ldr	r2, [pc, #196]	@ (80016dc <HAL_DMA_IRQHandler+0x204>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <HAL_DMA_IRQHandler+0x14a>
 800161c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001620:	e00e      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 8001622:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001626:	e00b      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 8001628:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800162c:	e008      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 800162e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001632:	e005      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 8001634:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001638:	e002      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 800163a:	2320      	movs	r3, #32
 800163c:	e000      	b.n	8001640 <HAL_DMA_IRQHandler+0x168>
 800163e:	2302      	movs	r3, #2
 8001640:	4a27      	ldr	r2, [pc, #156]	@ (80016e0 <HAL_DMA_IRQHandler+0x208>)
 8001642:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001650:	2b00      	cmp	r3, #0
 8001652:	d034      	beq.n	80016be <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800165c:	e02f      	b.n	80016be <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	2208      	movs	r2, #8
 8001664:	409a      	lsls	r2, r3
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d028      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1e8>
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	2b00      	cmp	r3, #0
 8001676:	d023      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 020e 	bic.w	r2, r2, #14
 8001686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001690:	2101      	movs	r1, #1
 8001692:	fa01 f202 	lsl.w	r2, r1, r2
 8001696:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d004      	beq.n	80016c0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	4798      	blx	r3
    }
  }
  return;
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
}
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40020008 	.word	0x40020008
 80016cc:	4002001c 	.word	0x4002001c
 80016d0:	40020030 	.word	0x40020030
 80016d4:	40020044 	.word	0x40020044
 80016d8:	40020058 	.word	0x40020058
 80016dc:	4002006c 	.word	0x4002006c
 80016e0:	40020000 	.word	0x40020000

080016e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
 80016f0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fa:	2101      	movs	r1, #1
 80016fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001700:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b10      	cmp	r3, #16
 8001710:	d108      	bne.n	8001724 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001722:	e007      	b.n	8001734 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]
}
 8001734:	bf00      	nop
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	@ 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e169      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8158 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a9a      	ldr	r2, [pc, #616]	@ (80019e0 <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a98      	ldr	r2, [pc, #608]	@ (80019e0 <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a98      	ldr	r2, [pc, #608]	@ (80019e4 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a96      	ldr	r2, [pc, #600]	@ (80019e4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a96      	ldr	r2, [pc, #600]	@ (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a94      	ldr	r2, [pc, #592]	@ (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a94      	ldr	r2, [pc, #592]	@ (80019ec <HAL_GPIO_Init+0x2ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a92      	ldr	r2, [pc, #584]	@ (80019ec <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a92      	ldr	r2, [pc, #584]	@ (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a90      	ldr	r2, [pc, #576]	@ (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a79      	ldr	r2, [pc, #484]	@ (80019f4 <HAL_GPIO_Init+0x2b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	@ 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	@ 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80b1 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	@ (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	@ (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a48      	ldr	r2, [pc, #288]	@ (80019fc <HAL_GPIO_Init+0x2bc>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	@ (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1ec>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3f      	ldr	r2, [pc, #252]	@ (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	@ (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e0>
 800191c:	2303      	movs	r3, #3
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001920:	2304      	movs	r3, #4
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 800192c:	2300      	movs	r3, #0
 800192e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800193e:	492f      	ldr	r1, [pc, #188]	@ (80019fc <HAL_GPIO_Init+0x2bc>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	492c      	ldr	r1, [pc, #176]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4928      	ldr	r1, [pc, #160]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4922      	ldr	r1, [pc, #136]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	491e      	ldr	r1, [pc, #120]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4918      	ldr	r1, [pc, #96]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4914      	ldr	r1, [pc, #80]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	490e      	ldr	r1, [pc, #56]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x2e2>
 80019de:	bf00      	nop
 80019e0:	10320000 	.word	0x10320000
 80019e4:	10310000 	.word	0x10310000
 80019e8:	10220000 	.word	0x10220000
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10120000 	.word	0x10120000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_GPIO_Init+0x304>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4909      	ldr	r1, [pc, #36]	@ (8001a44 <HAL_GPIO_Init+0x304>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae8e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	@ 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e272      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 8087 	beq.w	8001b76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a68:	4b92      	ldr	r3, [pc, #584]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	d00c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a74:	4b8f      	ldr	r3, [pc, #572]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d112      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
 8001a80:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a8c:	d10b      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8e:	4b89      	ldr	r3, [pc, #548]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d06c      	beq.n	8001b74 <HAL_RCC_OscConfig+0x12c>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d168      	bne.n	8001b74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e24c      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aae:	d106      	bne.n	8001abe <HAL_RCC_OscConfig+0x76>
 8001ab0:	4b80      	ldr	r3, [pc, #512]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7f      	ldr	r2, [pc, #508]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e02e      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10c      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x98>
 8001ac6:	4b7b      	ldr	r3, [pc, #492]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a7a      	ldr	r2, [pc, #488]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b78      	ldr	r3, [pc, #480]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a77      	ldr	r2, [pc, #476]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	e01d      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0xbc>
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a71      	ldr	r2, [pc, #452]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a6e      	ldr	r2, [pc, #440]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0xd4>
 8001b04:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b68      	ldr	r3, [pc, #416]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a67      	ldr	r2, [pc, #412]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b24:	f7fe ff16 	bl	8000954 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7fe ff12 	bl	8000954 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	@ 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e200      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0xe4>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ff02 	bl	8000954 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7fe fefe 	bl	8000954 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	@ 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1ec      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x10c>
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b82:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8e:	4b49      	ldr	r3, [pc, #292]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d11c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
 8001b9a:	4b46      	ldr	r3, [pc, #280]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d116      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e1c0      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4939      	ldr	r1, [pc, #228]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd2:	e03a      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d020      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7fe feb7 	bl	8000954 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bea:	f7fe feb3 	bl	8000954 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1a1      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0f0      	beq.n	8001bea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c08:	4b2a      	ldr	r3, [pc, #168]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	4927      	ldr	r1, [pc, #156]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	600b      	str	r3, [r1, #0]
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1e:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <HAL_RCC_OscConfig+0x270>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7fe fe96 	bl	8000954 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2c:	f7fe fe92 	bl	8000954 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e180      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d03a      	beq.n	8001ccc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d019      	beq.n	8001c92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5e:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c64:	f7fe fe76 	bl	8000954 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6c:	f7fe fe72 	bl	8000954 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e160      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c8a:	2001      	movs	r0, #1
 8001c8c:	f000 face 	bl	800222c <RCC_Delay>
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <HAL_RCC_OscConfig+0x274>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7fe fe5c 	bl	8000954 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	e00f      	b.n	8001cc0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7fe fe58 	bl	8000954 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d908      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e146      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	42420000 	.word	0x42420000
 8001cbc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1e9      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a6 	beq.w	8001e26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b8b      	ldr	r3, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10d      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	4b88      	ldr	r3, [pc, #544]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	4a87      	ldr	r2, [pc, #540]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf4:	61d3      	str	r3, [r2, #28]
 8001cf6:	4b85      	ldr	r3, [pc, #532]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	2301      	movs	r3, #1
 8001d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d06:	4b82      	ldr	r3, [pc, #520]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d118      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	4b7f      	ldr	r3, [pc, #508]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a7e      	ldr	r2, [pc, #504]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1e:	f7fe fe19 	bl	8000954 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7fe fe15 	bl	8000954 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b64      	cmp	r3, #100	@ 0x64
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e103      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d38:	4b75      	ldr	r3, [pc, #468]	@ (8001f10 <HAL_RCC_OscConfig+0x4c8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x312>
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e02d      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10c      	bne.n	8001d7c <HAL_RCC_OscConfig+0x334>
 8001d62:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	4a69      	ldr	r2, [pc, #420]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d68:	f023 0301 	bic.w	r3, r3, #1
 8001d6c:	6213      	str	r3, [r2, #32]
 8001d6e:	4b67      	ldr	r3, [pc, #412]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a66      	ldr	r2, [pc, #408]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d74:	f023 0304 	bic.w	r3, r3, #4
 8001d78:	6213      	str	r3, [r2, #32]
 8001d7a:	e01c      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d10c      	bne.n	8001d9e <HAL_RCC_OscConfig+0x356>
 8001d84:	4b61      	ldr	r3, [pc, #388]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a60      	ldr	r2, [pc, #384]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	4b5e      	ldr	r3, [pc, #376]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	4a5d      	ldr	r2, [pc, #372]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6213      	str	r3, [r2, #32]
 8001d9c:	e00b      	b.n	8001db6 <HAL_RCC_OscConfig+0x36e>
 8001d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0301 	bic.w	r3, r3, #1
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	4b58      	ldr	r3, [pc, #352]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	4a57      	ldr	r2, [pc, #348]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d015      	beq.n	8001dea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fdc9 	bl	8000954 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc4:	e00a      	b.n	8001ddc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc6:	f7fe fdc5 	bl	8000954 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0b1      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ee      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x37e>
 8001de8:	e014      	b.n	8001e14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dea:	f7fe fdb3 	bl	8000954 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	e00a      	b.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df2:	f7fe fdaf 	bl	8000954 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e09b      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1ee      	bne.n	8001df2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e14:	7dfb      	ldrb	r3, [r7, #23]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d105      	bne.n	8001e26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69db      	ldr	r3, [r3, #28]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e30:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d061      	beq.n	8001f00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d146      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b33      	ldr	r3, [pc, #204]	@ (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fd83 	bl	8000954 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7fe fd7f 	bl	8000954 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e06d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e64:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e78:	d108      	bne.n	8001e8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e7a:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	4921      	ldr	r1, [pc, #132]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a19      	ldr	r1, [r3, #32]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9c:	430b      	orrs	r3, r1
 8001e9e:	491b      	ldr	r1, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fd53 	bl	8000954 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe fd4f 	bl	8000954 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e03d      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x46a>
 8001ed0:	e035      	b.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_RCC_OscConfig+0x4cc>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7fe fd3c 	bl	8000954 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7fe fd38 	bl	8000954 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e026      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x498>
 8001efe:	e01e      	b.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e019      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40007000 	.word	0x40007000
 8001f14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <HAL_RCC_OscConfig+0x500>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d001      	beq.n	8001f3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0d0      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f60:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0307 	and.w	r3, r3, #7
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d910      	bls.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6e:	4b67      	ldr	r3, [pc, #412]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f023 0207 	bic.w	r2, r3, #7
 8001f76:	4965      	ldr	r1, [pc, #404]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7e:	4b63      	ldr	r3, [pc, #396]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0b8      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d020      	beq.n	8001fde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa8:	4b59      	ldr	r3, [pc, #356]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a58      	ldr	r2, [pc, #352]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fc0:	4b53      	ldr	r3, [pc, #332]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001fca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fcc:	4b50      	ldr	r3, [pc, #320]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	494d      	ldr	r1, [pc, #308]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d040      	beq.n	800206c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d107      	bne.n	8002002 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff2:	4b47      	ldr	r3, [pc, #284]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d115      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e07f      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200a:	4b41      	ldr	r3, [pc, #260]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e073      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201a:	4b3d      	ldr	r3, [pc, #244]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e06b      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800202a:	4b39      	ldr	r3, [pc, #228]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 0203 	bic.w	r2, r3, #3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4936      	ldr	r1, [pc, #216]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800203c:	f7fe fc8a 	bl	8000954 <HAL_GetTick>
 8002040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002042:	e00a      	b.n	800205a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002044:	f7fe fc86 	bl	8000954 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e053      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 020c 	and.w	r2, r3, #12
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	429a      	cmp	r2, r3
 800206a:	d1eb      	bne.n	8002044 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800206c:	4b27      	ldr	r3, [pc, #156]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d210      	bcs.n	800209c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 0207 	bic.w	r2, r3, #7
 8002082:	4922      	ldr	r1, [pc, #136]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800208a:	4b20      	ldr	r3, [pc, #128]	@ (800210c <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d001      	beq.n	800209c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e032      	b.n	8002102 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	4916      	ldr	r1, [pc, #88]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020c6:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	490e      	ldr	r1, [pc, #56]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020da:	f000 f821 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020de:	4602      	mov	r2, r0
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	490a      	ldr	r1, [pc, #40]	@ (8002114 <HAL_RCC_ClockConfig+0x1c8>)
 80020ec:	5ccb      	ldrb	r3, [r1, r3]
 80020ee:	fa22 f303 	lsr.w	r3, r2, r3
 80020f2:	4a09      	ldr	r2, [pc, #36]	@ (8002118 <HAL_RCC_ClockConfig+0x1cc>)
 80020f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <HAL_RCC_ClockConfig+0x1d0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fbe8 	bl	80008d0 <HAL_InitTick>

  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
 8002114:	08003694 	.word	0x08003694
 8002118:	20000000 	.word	0x20000000
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800213a:	4b1e      	ldr	r3, [pc, #120]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b04      	cmp	r3, #4
 8002148:	d002      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x30>
 800214a:	2b08      	cmp	r3, #8
 800214c:	d003      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x36>
 800214e:	e027      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002150:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002152:	613b      	str	r3, [r7, #16]
      break;
 8002154:	e027      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0c9b      	lsrs	r3, r3, #18
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d010      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800216e:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0c5b      	lsrs	r3, r3, #17
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800217a:	5cd3      	ldrb	r3, [r2, r3]
 800217c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	fb03 f202 	mul.w	r2, r3, r2
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	fbb2 f3f3 	udiv	r3, r2, r3
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e004      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a0c      	ldr	r2, [pc, #48]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	613b      	str	r3, [r7, #16]
      break;
 800219e:	e002      	b.n	80021a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021a2:	613b      	str	r3, [r7, #16]
      break;
 80021a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021a6:	693b      	ldr	r3, [r7, #16]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	007a1200 	.word	0x007a1200
 80021bc:	080036ac 	.word	0x080036ac
 80021c0:	080036bc 	.word	0x080036bc
 80021c4:	003d0900 	.word	0x003d0900

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b02      	ldr	r3, [pc, #8]	@ (80021d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bc80      	pop	{r7}
 80021d6:	4770      	bx	lr
 80021d8:	20000000 	.word	0x20000000

080021dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e0:	f7ff fff2 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	0a1b      	lsrs	r3, r3, #8
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	080036a4 	.word	0x080036a4

08002204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002208:	f7ff ffde 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	0adb      	lsrs	r3, r3, #11
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	080036a4 	.word	0x080036a4

0800222c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002234:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <RCC_Delay+0x34>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <RCC_Delay+0x38>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002248:	bf00      	nop
  }
  while (Delay --);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e5a      	subs	r2, r3, #1
 800224e:	60fa      	str	r2, [r7, #12]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f9      	bne.n	8002248 <RCC_Delay+0x1c>
}
 8002254:	bf00      	nop
 8002256:	bf00      	nop
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr
 8002260:	20000000 	.word	0x20000000
 8002264:	10624dd3 	.word	0x10624dd3

08002268 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	2b00      	cmp	r3, #0
 8002282:	d07d      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002288:	4b4f      	ldr	r3, [pc, #316]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10d      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002294:	4b4c      	ldr	r3, [pc, #304]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	4a4b      	ldr	r2, [pc, #300]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229e:	61d3      	str	r3, [r2, #28]
 80022a0:	4b49      	ldr	r3, [pc, #292]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ac:	2301      	movs	r3, #1
 80022ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b46      	ldr	r3, [pc, #280]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d118      	bne.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022bc:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a42      	ldr	r2, [pc, #264]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c8:	f7fe fb44 	bl	8000954 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ce:	e008      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7fe fb40 	bl	8000954 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	@ 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e06d      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e2:	4b3a      	ldr	r3, [pc, #232]	@ (80023cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ee:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80022f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02e      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d027      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800230c:	4b2e      	ldr	r3, [pc, #184]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002314:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002316:	4b2e      	ldr	r3, [pc, #184]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800231c:	4b2c      	ldr	r3, [pc, #176]	@ (80023d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002322:	4a29      	ldr	r2, [pc, #164]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d014      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002332:	f7fe fb0f 	bl	8000954 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002338:	e00a      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fb0b 	bl	8000954 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e036      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ee      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800235c:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4917      	ldr	r1, [pc, #92]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236a:	4313      	orrs	r3, r2
 800236c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800236e:	7dfb      	ldrb	r3, [r7, #23]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d105      	bne.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800237e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800238c:	4b0e      	ldr	r3, [pc, #56]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	490b      	ldr	r1, [pc, #44]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023aa:	4b07      	ldr	r3, [pc, #28]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4904      	ldr	r1, [pc, #16]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40007000 	.word	0x40007000
 80023d0:	42420440 	.word	0x42420440

080023d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e041      	b.n	800246a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f950 	bl	80006a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 f8f4 	bl	8002600 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b084      	sub	sp, #16
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002486:	2b01      	cmp	r3, #1
 8002488:	d101      	bne.n	800248e <HAL_TIM_ConfigClockSource+0x1c>
 800248a:	2302      	movs	r3, #2
 800248c:	e0b4      	b.n	80025f8 <HAL_TIM_ConfigClockSource+0x186>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2202      	movs	r2, #2
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80024ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80024b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024c6:	d03e      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0xd4>
 80024c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024cc:	f200 8087 	bhi.w	80025de <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d4:	f000 8086 	beq.w	80025e4 <HAL_TIM_ConfigClockSource+0x172>
 80024d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024dc:	d87f      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 80024de:	2b70      	cmp	r3, #112	@ 0x70
 80024e0:	d01a      	beq.n	8002518 <HAL_TIM_ConfigClockSource+0xa6>
 80024e2:	2b70      	cmp	r3, #112	@ 0x70
 80024e4:	d87b      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 80024e6:	2b60      	cmp	r3, #96	@ 0x60
 80024e8:	d050      	beq.n	800258c <HAL_TIM_ConfigClockSource+0x11a>
 80024ea:	2b60      	cmp	r3, #96	@ 0x60
 80024ec:	d877      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 80024ee:	2b50      	cmp	r3, #80	@ 0x50
 80024f0:	d03c      	beq.n	800256c <HAL_TIM_ConfigClockSource+0xfa>
 80024f2:	2b50      	cmp	r3, #80	@ 0x50
 80024f4:	d873      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 80024f6:	2b40      	cmp	r3, #64	@ 0x40
 80024f8:	d058      	beq.n	80025ac <HAL_TIM_ConfigClockSource+0x13a>
 80024fa:	2b40      	cmp	r3, #64	@ 0x40
 80024fc:	d86f      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 80024fe:	2b30      	cmp	r3, #48	@ 0x30
 8002500:	d064      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0x15a>
 8002502:	2b30      	cmp	r3, #48	@ 0x30
 8002504:	d86b      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 8002506:	2b20      	cmp	r3, #32
 8002508:	d060      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0x15a>
 800250a:	2b20      	cmp	r3, #32
 800250c:	d867      	bhi.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d05c      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0x15a>
 8002512:	2b10      	cmp	r3, #16
 8002514:	d05a      	beq.n	80025cc <HAL_TIM_ConfigClockSource+0x15a>
 8002516:	e062      	b.n	80025de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	f000 f94f 	bl	80027ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800253a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	609a      	str	r2, [r3, #8]
      break;
 8002544:	e04f      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	f000 f938 	bl	80027ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002568:	609a      	str	r2, [r3, #8]
      break;
 800256a:	e03c      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002578:	461a      	mov	r2, r3
 800257a:	f000 f8af 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2150      	movs	r1, #80	@ 0x50
 8002584:	4618      	mov	r0, r3
 8002586:	f000 f906 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 800258a:	e02c      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002598:	461a      	mov	r2, r3
 800259a:	f000 f8cd 	bl	8002738 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2160      	movs	r1, #96	@ 0x60
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f8f6 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 80025aa:	e01c      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b8:	461a      	mov	r2, r3
 80025ba:	f000 f88f 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2140      	movs	r1, #64	@ 0x40
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f8e6 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 80025ca:	e00c      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f000 f8dd 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 80025dc:	e003      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	73fb      	strb	r3, [r7, #15]
      break;
 80025e2:	e000      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a2f      	ldr	r2, [pc, #188]	@ (80026d0 <TIM_Base_SetConfig+0xd0>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a2c      	ldr	r2, [pc, #176]	@ (80026d4 <TIM_Base_SetConfig+0xd4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x30>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <TIM_Base_SetConfig+0xd8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <TIM_Base_SetConfig+0xd0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00b      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d007      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1f      	ldr	r2, [pc, #124]	@ (80026d4 <TIM_Base_SetConfig+0xd4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <TIM_Base_SetConfig+0x62>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a1e      	ldr	r2, [pc, #120]	@ (80026d8 <TIM_Base_SetConfig+0xd8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d108      	bne.n	8002674 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	4313      	orrs	r3, r2
 8002680:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a0d      	ldr	r2, [pc, #52]	@ (80026d0 <TIM_Base_SetConfig+0xd0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d103      	bne.n	80026a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f023 0201 	bic.w	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]
  }
}
 80026c6:	bf00      	nop
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr
 80026d0:	40012c00 	.word	0x40012c00
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800

080026dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 030a 	bic.w	r3, r3, #10
 8002718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0210 	bic.w	r2, r3, #16
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	031b      	lsls	r3, r3, #12
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002774:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f043 0307 	orr.w	r3, r3, #7
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	609a      	str	r2, [r3, #8]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	609a      	str	r2, [r3, #8]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e046      	b.n	80028ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a16      	ldr	r2, [pc, #88]	@ (80028b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800286c:	d009      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d10c      	bne.n	800289c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800

080028c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e042      	b.n	800295c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d106      	bne.n	80028f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fd fef6 	bl	80006dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2224      	movs	r2, #36	@ 0x24
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68da      	ldr	r2, [r3, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f971 	bl	8002bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800291c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800292c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800293c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	@ 0x28
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b20      	cmp	r3, #32
 8002982:	d175      	bne.n	8002a70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_UART_Transmit+0x2c>
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e06e      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2221      	movs	r2, #33	@ 0x21
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029a2:	f7fd ffd7 	bl	8000954 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	88fa      	ldrh	r2, [r7, #6]
 80029ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	88fa      	ldrh	r2, [r7, #6]
 80029b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029bc:	d108      	bne.n	80029d0 <HAL_UART_Transmit+0x6c>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e003      	b.n	80029d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029d8:	e02e      	b.n	8002a38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	2180      	movs	r1, #128	@ 0x80
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	f000 f848 	bl	8002a7a <UART_WaitOnFlagUntilTimeout>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e03a      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3302      	adds	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
 8002a18:	e007      	b.n	8002a2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	3301      	adds	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1cb      	bne.n	80029da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2140      	movs	r1, #64	@ 0x40
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f814 	bl	8002a7a <UART_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d005      	beq.n	8002a64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e006      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e000      	b.n	8002a72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a70:	2302      	movs	r3, #2
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	4613      	mov	r3, r2
 8002a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a8a:	e03b      	b.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d037      	beq.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a94:	f7fd ff5e 	bl	8000954 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	6a3a      	ldr	r2, [r7, #32]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d302      	bcc.n	8002aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e03a      	b.n	8002b24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b80      	cmp	r3, #128	@ 0x80
 8002ac0:	d020      	beq.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d01d      	beq.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d116      	bne.n	8002b04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 f81d 	bl	8002b2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2208      	movs	r2, #8
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e00f      	b.n	8002b24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d0b4      	beq.n	8002a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b095      	sub	sp, #84	@ 0x54
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	330c      	adds	r3, #12
 8002b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b3e:	e853 3f00 	ldrex	r3, [r3]
 8002b42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	330c      	adds	r3, #12
 8002b52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b54:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b5c:	e841 2300 	strex	r3, r2, [r1]
 8002b60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	e853 3f00 	ldrex	r3, [r3]
 8002b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f023 0301 	bic.w	r3, r3, #1
 8002b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	3314      	adds	r3, #20
 8002b86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e5      	bne.n	8002b68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d119      	bne.n	8002bd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	e853 3f00 	ldrex	r3, [r3]
 8002bb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f023 0310 	bic.w	r3, r3, #16
 8002bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	330c      	adds	r3, #12
 8002bc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bc4:	61ba      	str	r2, [r7, #24]
 8002bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	e841 2300 	strex	r3, r2, [r1]
 8002bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e5      	bne.n	8002ba4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002be6:	bf00      	nop
 8002be8:	3754      	adds	r7, #84	@ 0x54
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c2a:	f023 030c 	bic.w	r3, r3, #12
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a2c      	ldr	r2, [pc, #176]	@ (8002d04 <UART_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d103      	bne.n	8002c60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c58:	f7ff fad4 	bl	8002204 <HAL_RCC_GetPCLK2Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	e002      	b.n	8002c66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c60:	f7ff fabc 	bl	80021dc <HAL_RCC_GetPCLK1Freq>
 8002c64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009a      	lsls	r2, r3, #2
 8002c70:	441a      	add	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7c:	4a22      	ldr	r2, [pc, #136]	@ (8002d08 <UART_SetConfig+0x118>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	0119      	lsls	r1, r3, #4
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009a      	lsls	r2, r3, #2
 8002c90:	441a      	add	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d08 <UART_SetConfig+0x118>)
 8002c9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	2064      	movs	r0, #100	@ 0x64
 8002ca6:	fb00 f303 	mul.w	r3, r0, r3
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	3332      	adds	r3, #50	@ 0x32
 8002cb0:	4a15      	ldr	r2, [pc, #84]	@ (8002d08 <UART_SetConfig+0x118>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cbc:	4419      	add	r1, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009a      	lsls	r2, r3, #2
 8002cc8:	441a      	add	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <UART_SetConfig+0x118>)
 8002cd6:	fba3 0302 	umull	r0, r3, r3, r2
 8002cda:	095b      	lsrs	r3, r3, #5
 8002cdc:	2064      	movs	r0, #100	@ 0x64
 8002cde:	fb00 f303 	mul.w	r3, r0, r3
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	3332      	adds	r3, #50	@ 0x32
 8002ce8:	4a07      	ldr	r2, [pc, #28]	@ (8002d08 <UART_SetConfig+0x118>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	440a      	add	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40013800 	.word	0x40013800
 8002d08:	51eb851f 	.word	0x51eb851f

08002d0c <siprintf>:
 8002d0c:	b40e      	push	{r1, r2, r3}
 8002d0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d12:	b500      	push	{lr}
 8002d14:	b09c      	sub	sp, #112	@ 0x70
 8002d16:	ab1d      	add	r3, sp, #116	@ 0x74
 8002d18:	9002      	str	r0, [sp, #8]
 8002d1a:	9006      	str	r0, [sp, #24]
 8002d1c:	9107      	str	r1, [sp, #28]
 8002d1e:	9104      	str	r1, [sp, #16]
 8002d20:	4808      	ldr	r0, [pc, #32]	@ (8002d44 <siprintf+0x38>)
 8002d22:	4909      	ldr	r1, [pc, #36]	@ (8002d48 <siprintf+0x3c>)
 8002d24:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d28:	9105      	str	r1, [sp, #20]
 8002d2a:	6800      	ldr	r0, [r0, #0]
 8002d2c:	a902      	add	r1, sp, #8
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	f000 f992 	bl	8003058 <_svfiprintf_r>
 8002d34:	2200      	movs	r2, #0
 8002d36:	9b02      	ldr	r3, [sp, #8]
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	b01c      	add	sp, #112	@ 0x70
 8002d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d40:	b003      	add	sp, #12
 8002d42:	4770      	bx	lr
 8002d44:	2000000c 	.word	0x2000000c
 8002d48:	ffff0208 	.word	0xffff0208

08002d4c <memset>:
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4402      	add	r2, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <__errno>:
 8002d5c:	4b01      	ldr	r3, [pc, #4]	@ (8002d64 <__errno+0x8>)
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000000c 	.word	0x2000000c

08002d68 <__libc_init_array>:
 8002d68:	b570      	push	{r4, r5, r6, lr}
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	4d0c      	ldr	r5, [pc, #48]	@ (8002da0 <__libc_init_array+0x38>)
 8002d6e:	4c0d      	ldr	r4, [pc, #52]	@ (8002da4 <__libc_init_array+0x3c>)
 8002d70:	1b64      	subs	r4, r4, r5
 8002d72:	10a4      	asrs	r4, r4, #2
 8002d74:	42a6      	cmp	r6, r4
 8002d76:	d109      	bne.n	8002d8c <__libc_init_array+0x24>
 8002d78:	f000 fc78 	bl	800366c <_init>
 8002d7c:	2600      	movs	r6, #0
 8002d7e:	4d0a      	ldr	r5, [pc, #40]	@ (8002da8 <__libc_init_array+0x40>)
 8002d80:	4c0a      	ldr	r4, [pc, #40]	@ (8002dac <__libc_init_array+0x44>)
 8002d82:	1b64      	subs	r4, r4, r5
 8002d84:	10a4      	asrs	r4, r4, #2
 8002d86:	42a6      	cmp	r6, r4
 8002d88:	d105      	bne.n	8002d96 <__libc_init_array+0x2e>
 8002d8a:	bd70      	pop	{r4, r5, r6, pc}
 8002d8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d90:	4798      	blx	r3
 8002d92:	3601      	adds	r6, #1
 8002d94:	e7ee      	b.n	8002d74 <__libc_init_array+0xc>
 8002d96:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9a:	4798      	blx	r3
 8002d9c:	3601      	adds	r6, #1
 8002d9e:	e7f2      	b.n	8002d86 <__libc_init_array+0x1e>
 8002da0:	080036f4 	.word	0x080036f4
 8002da4:	080036f4 	.word	0x080036f4
 8002da8:	080036f4 	.word	0x080036f4
 8002dac:	080036f8 	.word	0x080036f8

08002db0 <__retarget_lock_acquire_recursive>:
 8002db0:	4770      	bx	lr

08002db2 <__retarget_lock_release_recursive>:
 8002db2:	4770      	bx	lr

08002db4 <_free_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4605      	mov	r5, r0
 8002db8:	2900      	cmp	r1, #0
 8002dba:	d040      	beq.n	8002e3e <_free_r+0x8a>
 8002dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dc0:	1f0c      	subs	r4, r1, #4
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	bfb8      	it	lt
 8002dc6:	18e4      	addlt	r4, r4, r3
 8002dc8:	f000 f8de 	bl	8002f88 <__malloc_lock>
 8002dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002e40 <_free_r+0x8c>)
 8002dce:	6813      	ldr	r3, [r2, #0]
 8002dd0:	b933      	cbnz	r3, 8002de0 <_free_r+0x2c>
 8002dd2:	6063      	str	r3, [r4, #4]
 8002dd4:	6014      	str	r4, [r2, #0]
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ddc:	f000 b8da 	b.w	8002f94 <__malloc_unlock>
 8002de0:	42a3      	cmp	r3, r4
 8002de2:	d908      	bls.n	8002df6 <_free_r+0x42>
 8002de4:	6820      	ldr	r0, [r4, #0]
 8002de6:	1821      	adds	r1, r4, r0
 8002de8:	428b      	cmp	r3, r1
 8002dea:	bf01      	itttt	eq
 8002dec:	6819      	ldreq	r1, [r3, #0]
 8002dee:	685b      	ldreq	r3, [r3, #4]
 8002df0:	1809      	addeq	r1, r1, r0
 8002df2:	6021      	streq	r1, [r4, #0]
 8002df4:	e7ed      	b.n	8002dd2 <_free_r+0x1e>
 8002df6:	461a      	mov	r2, r3
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b10b      	cbz	r3, 8002e00 <_free_r+0x4c>
 8002dfc:	42a3      	cmp	r3, r4
 8002dfe:	d9fa      	bls.n	8002df6 <_free_r+0x42>
 8002e00:	6811      	ldr	r1, [r2, #0]
 8002e02:	1850      	adds	r0, r2, r1
 8002e04:	42a0      	cmp	r0, r4
 8002e06:	d10b      	bne.n	8002e20 <_free_r+0x6c>
 8002e08:	6820      	ldr	r0, [r4, #0]
 8002e0a:	4401      	add	r1, r0
 8002e0c:	1850      	adds	r0, r2, r1
 8002e0e:	4283      	cmp	r3, r0
 8002e10:	6011      	str	r1, [r2, #0]
 8002e12:	d1e0      	bne.n	8002dd6 <_free_r+0x22>
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	4408      	add	r0, r1
 8002e1a:	6010      	str	r0, [r2, #0]
 8002e1c:	6053      	str	r3, [r2, #4]
 8002e1e:	e7da      	b.n	8002dd6 <_free_r+0x22>
 8002e20:	d902      	bls.n	8002e28 <_free_r+0x74>
 8002e22:	230c      	movs	r3, #12
 8002e24:	602b      	str	r3, [r5, #0]
 8002e26:	e7d6      	b.n	8002dd6 <_free_r+0x22>
 8002e28:	6820      	ldr	r0, [r4, #0]
 8002e2a:	1821      	adds	r1, r4, r0
 8002e2c:	428b      	cmp	r3, r1
 8002e2e:	bf01      	itttt	eq
 8002e30:	6819      	ldreq	r1, [r3, #0]
 8002e32:	685b      	ldreq	r3, [r3, #4]
 8002e34:	1809      	addeq	r1, r1, r0
 8002e36:	6021      	streq	r1, [r4, #0]
 8002e38:	6063      	str	r3, [r4, #4]
 8002e3a:	6054      	str	r4, [r2, #4]
 8002e3c:	e7cb      	b.n	8002dd6 <_free_r+0x22>
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
 8002e40:	2000030c 	.word	0x2000030c

08002e44 <sbrk_aligned>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4e0f      	ldr	r6, [pc, #60]	@ (8002e84 <sbrk_aligned+0x40>)
 8002e48:	460c      	mov	r4, r1
 8002e4a:	6831      	ldr	r1, [r6, #0]
 8002e4c:	4605      	mov	r5, r0
 8002e4e:	b911      	cbnz	r1, 8002e56 <sbrk_aligned+0x12>
 8002e50:	f000 fbaa 	bl	80035a8 <_sbrk_r>
 8002e54:	6030      	str	r0, [r6, #0]
 8002e56:	4621      	mov	r1, r4
 8002e58:	4628      	mov	r0, r5
 8002e5a:	f000 fba5 	bl	80035a8 <_sbrk_r>
 8002e5e:	1c43      	adds	r3, r0, #1
 8002e60:	d103      	bne.n	8002e6a <sbrk_aligned+0x26>
 8002e62:	f04f 34ff 	mov.w	r4, #4294967295
 8002e66:	4620      	mov	r0, r4
 8002e68:	bd70      	pop	{r4, r5, r6, pc}
 8002e6a:	1cc4      	adds	r4, r0, #3
 8002e6c:	f024 0403 	bic.w	r4, r4, #3
 8002e70:	42a0      	cmp	r0, r4
 8002e72:	d0f8      	beq.n	8002e66 <sbrk_aligned+0x22>
 8002e74:	1a21      	subs	r1, r4, r0
 8002e76:	4628      	mov	r0, r5
 8002e78:	f000 fb96 	bl	80035a8 <_sbrk_r>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d1f2      	bne.n	8002e66 <sbrk_aligned+0x22>
 8002e80:	e7ef      	b.n	8002e62 <sbrk_aligned+0x1e>
 8002e82:	bf00      	nop
 8002e84:	20000308 	.word	0x20000308

08002e88 <_malloc_r>:
 8002e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e8c:	1ccd      	adds	r5, r1, #3
 8002e8e:	f025 0503 	bic.w	r5, r5, #3
 8002e92:	3508      	adds	r5, #8
 8002e94:	2d0c      	cmp	r5, #12
 8002e96:	bf38      	it	cc
 8002e98:	250c      	movcc	r5, #12
 8002e9a:	2d00      	cmp	r5, #0
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	db01      	blt.n	8002ea4 <_malloc_r+0x1c>
 8002ea0:	42a9      	cmp	r1, r5
 8002ea2:	d904      	bls.n	8002eae <_malloc_r+0x26>
 8002ea4:	230c      	movs	r3, #12
 8002ea6:	6033      	str	r3, [r6, #0]
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002f84 <_malloc_r+0xfc>
 8002eb2:	f000 f869 	bl	8002f88 <__malloc_lock>
 8002eb6:	f8d8 3000 	ldr.w	r3, [r8]
 8002eba:	461c      	mov	r4, r3
 8002ebc:	bb44      	cbnz	r4, 8002f10 <_malloc_r+0x88>
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	f7ff ffbf 	bl	8002e44 <sbrk_aligned>
 8002ec6:	1c43      	adds	r3, r0, #1
 8002ec8:	4604      	mov	r4, r0
 8002eca:	d158      	bne.n	8002f7e <_malloc_r+0xf6>
 8002ecc:	f8d8 4000 	ldr.w	r4, [r8]
 8002ed0:	4627      	mov	r7, r4
 8002ed2:	2f00      	cmp	r7, #0
 8002ed4:	d143      	bne.n	8002f5e <_malloc_r+0xd6>
 8002ed6:	2c00      	cmp	r4, #0
 8002ed8:	d04b      	beq.n	8002f72 <_malloc_r+0xea>
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	4639      	mov	r1, r7
 8002ede:	4630      	mov	r0, r6
 8002ee0:	eb04 0903 	add.w	r9, r4, r3
 8002ee4:	f000 fb60 	bl	80035a8 <_sbrk_r>
 8002ee8:	4581      	cmp	r9, r0
 8002eea:	d142      	bne.n	8002f72 <_malloc_r+0xea>
 8002eec:	6821      	ldr	r1, [r4, #0]
 8002eee:	4630      	mov	r0, r6
 8002ef0:	1a6d      	subs	r5, r5, r1
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	f7ff ffa6 	bl	8002e44 <sbrk_aligned>
 8002ef8:	3001      	adds	r0, #1
 8002efa:	d03a      	beq.n	8002f72 <_malloc_r+0xea>
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	442b      	add	r3, r5
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	f8d8 3000 	ldr.w	r3, [r8]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	bb62      	cbnz	r2, 8002f64 <_malloc_r+0xdc>
 8002f0a:	f8c8 7000 	str.w	r7, [r8]
 8002f0e:	e00f      	b.n	8002f30 <_malloc_r+0xa8>
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	1b52      	subs	r2, r2, r5
 8002f14:	d420      	bmi.n	8002f58 <_malloc_r+0xd0>
 8002f16:	2a0b      	cmp	r2, #11
 8002f18:	d917      	bls.n	8002f4a <_malloc_r+0xc2>
 8002f1a:	1961      	adds	r1, r4, r5
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	6025      	str	r5, [r4, #0]
 8002f20:	bf18      	it	ne
 8002f22:	6059      	strne	r1, [r3, #4]
 8002f24:	6863      	ldr	r3, [r4, #4]
 8002f26:	bf08      	it	eq
 8002f28:	f8c8 1000 	streq.w	r1, [r8]
 8002f2c:	5162      	str	r2, [r4, r5]
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	4630      	mov	r0, r6
 8002f32:	f000 f82f 	bl	8002f94 <__malloc_unlock>
 8002f36:	f104 000b 	add.w	r0, r4, #11
 8002f3a:	1d23      	adds	r3, r4, #4
 8002f3c:	f020 0007 	bic.w	r0, r0, #7
 8002f40:	1ac2      	subs	r2, r0, r3
 8002f42:	bf1c      	itt	ne
 8002f44:	1a1b      	subne	r3, r3, r0
 8002f46:	50a3      	strne	r3, [r4, r2]
 8002f48:	e7af      	b.n	8002eaa <_malloc_r+0x22>
 8002f4a:	6862      	ldr	r2, [r4, #4]
 8002f4c:	42a3      	cmp	r3, r4
 8002f4e:	bf0c      	ite	eq
 8002f50:	f8c8 2000 	streq.w	r2, [r8]
 8002f54:	605a      	strne	r2, [r3, #4]
 8002f56:	e7eb      	b.n	8002f30 <_malloc_r+0xa8>
 8002f58:	4623      	mov	r3, r4
 8002f5a:	6864      	ldr	r4, [r4, #4]
 8002f5c:	e7ae      	b.n	8002ebc <_malloc_r+0x34>
 8002f5e:	463c      	mov	r4, r7
 8002f60:	687f      	ldr	r7, [r7, #4]
 8002f62:	e7b6      	b.n	8002ed2 <_malloc_r+0x4a>
 8002f64:	461a      	mov	r2, r3
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	d1fb      	bne.n	8002f64 <_malloc_r+0xdc>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	6053      	str	r3, [r2, #4]
 8002f70:	e7de      	b.n	8002f30 <_malloc_r+0xa8>
 8002f72:	230c      	movs	r3, #12
 8002f74:	4630      	mov	r0, r6
 8002f76:	6033      	str	r3, [r6, #0]
 8002f78:	f000 f80c 	bl	8002f94 <__malloc_unlock>
 8002f7c:	e794      	b.n	8002ea8 <_malloc_r+0x20>
 8002f7e:	6005      	str	r5, [r0, #0]
 8002f80:	e7d6      	b.n	8002f30 <_malloc_r+0xa8>
 8002f82:	bf00      	nop
 8002f84:	2000030c 	.word	0x2000030c

08002f88 <__malloc_lock>:
 8002f88:	4801      	ldr	r0, [pc, #4]	@ (8002f90 <__malloc_lock+0x8>)
 8002f8a:	f7ff bf11 	b.w	8002db0 <__retarget_lock_acquire_recursive>
 8002f8e:	bf00      	nop
 8002f90:	20000304 	.word	0x20000304

08002f94 <__malloc_unlock>:
 8002f94:	4801      	ldr	r0, [pc, #4]	@ (8002f9c <__malloc_unlock+0x8>)
 8002f96:	f7ff bf0c 	b.w	8002db2 <__retarget_lock_release_recursive>
 8002f9a:	bf00      	nop
 8002f9c:	20000304 	.word	0x20000304

08002fa0 <__ssputs_r>:
 8002fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fa4:	461f      	mov	r7, r3
 8002fa6:	688e      	ldr	r6, [r1, #8]
 8002fa8:	4682      	mov	sl, r0
 8002faa:	42be      	cmp	r6, r7
 8002fac:	460c      	mov	r4, r1
 8002fae:	4690      	mov	r8, r2
 8002fb0:	680b      	ldr	r3, [r1, #0]
 8002fb2:	d82d      	bhi.n	8003010 <__ssputs_r+0x70>
 8002fb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002fbc:	d026      	beq.n	800300c <__ssputs_r+0x6c>
 8002fbe:	6965      	ldr	r5, [r4, #20]
 8002fc0:	6909      	ldr	r1, [r1, #16]
 8002fc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fc6:	eba3 0901 	sub.w	r9, r3, r1
 8002fca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002fce:	1c7b      	adds	r3, r7, #1
 8002fd0:	444b      	add	r3, r9
 8002fd2:	106d      	asrs	r5, r5, #1
 8002fd4:	429d      	cmp	r5, r3
 8002fd6:	bf38      	it	cc
 8002fd8:	461d      	movcc	r5, r3
 8002fda:	0553      	lsls	r3, r2, #21
 8002fdc:	d527      	bpl.n	800302e <__ssputs_r+0x8e>
 8002fde:	4629      	mov	r1, r5
 8002fe0:	f7ff ff52 	bl	8002e88 <_malloc_r>
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	b360      	cbz	r0, 8003042 <__ssputs_r+0xa2>
 8002fe8:	464a      	mov	r2, r9
 8002fea:	6921      	ldr	r1, [r4, #16]
 8002fec:	f000 fafa 	bl	80035e4 <memcpy>
 8002ff0:	89a3      	ldrh	r3, [r4, #12]
 8002ff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002ff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ffa:	81a3      	strh	r3, [r4, #12]
 8002ffc:	6126      	str	r6, [r4, #16]
 8002ffe:	444e      	add	r6, r9
 8003000:	6026      	str	r6, [r4, #0]
 8003002:	463e      	mov	r6, r7
 8003004:	6165      	str	r5, [r4, #20]
 8003006:	eba5 0509 	sub.w	r5, r5, r9
 800300a:	60a5      	str	r5, [r4, #8]
 800300c:	42be      	cmp	r6, r7
 800300e:	d900      	bls.n	8003012 <__ssputs_r+0x72>
 8003010:	463e      	mov	r6, r7
 8003012:	4632      	mov	r2, r6
 8003014:	4641      	mov	r1, r8
 8003016:	6820      	ldr	r0, [r4, #0]
 8003018:	f000 faac 	bl	8003574 <memmove>
 800301c:	2000      	movs	r0, #0
 800301e:	68a3      	ldr	r3, [r4, #8]
 8003020:	1b9b      	subs	r3, r3, r6
 8003022:	60a3      	str	r3, [r4, #8]
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	4433      	add	r3, r6
 8003028:	6023      	str	r3, [r4, #0]
 800302a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302e:	462a      	mov	r2, r5
 8003030:	f000 fae6 	bl	8003600 <_realloc_r>
 8003034:	4606      	mov	r6, r0
 8003036:	2800      	cmp	r0, #0
 8003038:	d1e0      	bne.n	8002ffc <__ssputs_r+0x5c>
 800303a:	4650      	mov	r0, sl
 800303c:	6921      	ldr	r1, [r4, #16]
 800303e:	f7ff feb9 	bl	8002db4 <_free_r>
 8003042:	230c      	movs	r3, #12
 8003044:	f8ca 3000 	str.w	r3, [sl]
 8003048:	89a3      	ldrh	r3, [r4, #12]
 800304a:	f04f 30ff 	mov.w	r0, #4294967295
 800304e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003052:	81a3      	strh	r3, [r4, #12]
 8003054:	e7e9      	b.n	800302a <__ssputs_r+0x8a>
	...

08003058 <_svfiprintf_r>:
 8003058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800305c:	4698      	mov	r8, r3
 800305e:	898b      	ldrh	r3, [r1, #12]
 8003060:	4607      	mov	r7, r0
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	460d      	mov	r5, r1
 8003066:	4614      	mov	r4, r2
 8003068:	b09d      	sub	sp, #116	@ 0x74
 800306a:	d510      	bpl.n	800308e <_svfiprintf_r+0x36>
 800306c:	690b      	ldr	r3, [r1, #16]
 800306e:	b973      	cbnz	r3, 800308e <_svfiprintf_r+0x36>
 8003070:	2140      	movs	r1, #64	@ 0x40
 8003072:	f7ff ff09 	bl	8002e88 <_malloc_r>
 8003076:	6028      	str	r0, [r5, #0]
 8003078:	6128      	str	r0, [r5, #16]
 800307a:	b930      	cbnz	r0, 800308a <_svfiprintf_r+0x32>
 800307c:	230c      	movs	r3, #12
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	f04f 30ff 	mov.w	r0, #4294967295
 8003084:	b01d      	add	sp, #116	@ 0x74
 8003086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800308a:	2340      	movs	r3, #64	@ 0x40
 800308c:	616b      	str	r3, [r5, #20]
 800308e:	2300      	movs	r3, #0
 8003090:	9309      	str	r3, [sp, #36]	@ 0x24
 8003092:	2320      	movs	r3, #32
 8003094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003098:	2330      	movs	r3, #48	@ 0x30
 800309a:	f04f 0901 	mov.w	r9, #1
 800309e:	f8cd 800c 	str.w	r8, [sp, #12]
 80030a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800323c <_svfiprintf_r+0x1e4>
 80030a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80030aa:	4623      	mov	r3, r4
 80030ac:	469a      	mov	sl, r3
 80030ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030b2:	b10a      	cbz	r2, 80030b8 <_svfiprintf_r+0x60>
 80030b4:	2a25      	cmp	r2, #37	@ 0x25
 80030b6:	d1f9      	bne.n	80030ac <_svfiprintf_r+0x54>
 80030b8:	ebba 0b04 	subs.w	fp, sl, r4
 80030bc:	d00b      	beq.n	80030d6 <_svfiprintf_r+0x7e>
 80030be:	465b      	mov	r3, fp
 80030c0:	4622      	mov	r2, r4
 80030c2:	4629      	mov	r1, r5
 80030c4:	4638      	mov	r0, r7
 80030c6:	f7ff ff6b 	bl	8002fa0 <__ssputs_r>
 80030ca:	3001      	adds	r0, #1
 80030cc:	f000 80a7 	beq.w	800321e <_svfiprintf_r+0x1c6>
 80030d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80030d2:	445a      	add	r2, fp
 80030d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80030d6:	f89a 3000 	ldrb.w	r3, [sl]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 809f 	beq.w	800321e <_svfiprintf_r+0x1c6>
 80030e0:	2300      	movs	r3, #0
 80030e2:	f04f 32ff 	mov.w	r2, #4294967295
 80030e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030ea:	f10a 0a01 	add.w	sl, sl, #1
 80030ee:	9304      	str	r3, [sp, #16]
 80030f0:	9307      	str	r3, [sp, #28]
 80030f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80030f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80030f8:	4654      	mov	r4, sl
 80030fa:	2205      	movs	r2, #5
 80030fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003100:	484e      	ldr	r0, [pc, #312]	@ (800323c <_svfiprintf_r+0x1e4>)
 8003102:	f000 fa61 	bl	80035c8 <memchr>
 8003106:	9a04      	ldr	r2, [sp, #16]
 8003108:	b9d8      	cbnz	r0, 8003142 <_svfiprintf_r+0xea>
 800310a:	06d0      	lsls	r0, r2, #27
 800310c:	bf44      	itt	mi
 800310e:	2320      	movmi	r3, #32
 8003110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003114:	0711      	lsls	r1, r2, #28
 8003116:	bf44      	itt	mi
 8003118:	232b      	movmi	r3, #43	@ 0x2b
 800311a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800311e:	f89a 3000 	ldrb.w	r3, [sl]
 8003122:	2b2a      	cmp	r3, #42	@ 0x2a
 8003124:	d015      	beq.n	8003152 <_svfiprintf_r+0xfa>
 8003126:	4654      	mov	r4, sl
 8003128:	2000      	movs	r0, #0
 800312a:	f04f 0c0a 	mov.w	ip, #10
 800312e:	9a07      	ldr	r2, [sp, #28]
 8003130:	4621      	mov	r1, r4
 8003132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003136:	3b30      	subs	r3, #48	@ 0x30
 8003138:	2b09      	cmp	r3, #9
 800313a:	d94b      	bls.n	80031d4 <_svfiprintf_r+0x17c>
 800313c:	b1b0      	cbz	r0, 800316c <_svfiprintf_r+0x114>
 800313e:	9207      	str	r2, [sp, #28]
 8003140:	e014      	b.n	800316c <_svfiprintf_r+0x114>
 8003142:	eba0 0308 	sub.w	r3, r0, r8
 8003146:	fa09 f303 	lsl.w	r3, r9, r3
 800314a:	4313      	orrs	r3, r2
 800314c:	46a2      	mov	sl, r4
 800314e:	9304      	str	r3, [sp, #16]
 8003150:	e7d2      	b.n	80030f8 <_svfiprintf_r+0xa0>
 8003152:	9b03      	ldr	r3, [sp, #12]
 8003154:	1d19      	adds	r1, r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	9103      	str	r1, [sp, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	bfbb      	ittet	lt
 800315e:	425b      	neglt	r3, r3
 8003160:	f042 0202 	orrlt.w	r2, r2, #2
 8003164:	9307      	strge	r3, [sp, #28]
 8003166:	9307      	strlt	r3, [sp, #28]
 8003168:	bfb8      	it	lt
 800316a:	9204      	strlt	r2, [sp, #16]
 800316c:	7823      	ldrb	r3, [r4, #0]
 800316e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003170:	d10a      	bne.n	8003188 <_svfiprintf_r+0x130>
 8003172:	7863      	ldrb	r3, [r4, #1]
 8003174:	2b2a      	cmp	r3, #42	@ 0x2a
 8003176:	d132      	bne.n	80031de <_svfiprintf_r+0x186>
 8003178:	9b03      	ldr	r3, [sp, #12]
 800317a:	3402      	adds	r4, #2
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	9203      	str	r2, [sp, #12]
 8003182:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003186:	9305      	str	r3, [sp, #20]
 8003188:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003240 <_svfiprintf_r+0x1e8>
 800318c:	2203      	movs	r2, #3
 800318e:	4650      	mov	r0, sl
 8003190:	7821      	ldrb	r1, [r4, #0]
 8003192:	f000 fa19 	bl	80035c8 <memchr>
 8003196:	b138      	cbz	r0, 80031a8 <_svfiprintf_r+0x150>
 8003198:	2240      	movs	r2, #64	@ 0x40
 800319a:	9b04      	ldr	r3, [sp, #16]
 800319c:	eba0 000a 	sub.w	r0, r0, sl
 80031a0:	4082      	lsls	r2, r0
 80031a2:	4313      	orrs	r3, r2
 80031a4:	3401      	adds	r4, #1
 80031a6:	9304      	str	r3, [sp, #16]
 80031a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031ac:	2206      	movs	r2, #6
 80031ae:	4825      	ldr	r0, [pc, #148]	@ (8003244 <_svfiprintf_r+0x1ec>)
 80031b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80031b4:	f000 fa08 	bl	80035c8 <memchr>
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d036      	beq.n	800322a <_svfiprintf_r+0x1d2>
 80031bc:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <_svfiprintf_r+0x1f0>)
 80031be:	bb1b      	cbnz	r3, 8003208 <_svfiprintf_r+0x1b0>
 80031c0:	9b03      	ldr	r3, [sp, #12]
 80031c2:	3307      	adds	r3, #7
 80031c4:	f023 0307 	bic.w	r3, r3, #7
 80031c8:	3308      	adds	r3, #8
 80031ca:	9303      	str	r3, [sp, #12]
 80031cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80031ce:	4433      	add	r3, r6
 80031d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80031d2:	e76a      	b.n	80030aa <_svfiprintf_r+0x52>
 80031d4:	460c      	mov	r4, r1
 80031d6:	2001      	movs	r0, #1
 80031d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80031dc:	e7a8      	b.n	8003130 <_svfiprintf_r+0xd8>
 80031de:	2300      	movs	r3, #0
 80031e0:	f04f 0c0a 	mov.w	ip, #10
 80031e4:	4619      	mov	r1, r3
 80031e6:	3401      	adds	r4, #1
 80031e8:	9305      	str	r3, [sp, #20]
 80031ea:	4620      	mov	r0, r4
 80031ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031f0:	3a30      	subs	r2, #48	@ 0x30
 80031f2:	2a09      	cmp	r2, #9
 80031f4:	d903      	bls.n	80031fe <_svfiprintf_r+0x1a6>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0c6      	beq.n	8003188 <_svfiprintf_r+0x130>
 80031fa:	9105      	str	r1, [sp, #20]
 80031fc:	e7c4      	b.n	8003188 <_svfiprintf_r+0x130>
 80031fe:	4604      	mov	r4, r0
 8003200:	2301      	movs	r3, #1
 8003202:	fb0c 2101 	mla	r1, ip, r1, r2
 8003206:	e7f0      	b.n	80031ea <_svfiprintf_r+0x192>
 8003208:	ab03      	add	r3, sp, #12
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	462a      	mov	r2, r5
 800320e:	4638      	mov	r0, r7
 8003210:	4b0e      	ldr	r3, [pc, #56]	@ (800324c <_svfiprintf_r+0x1f4>)
 8003212:	a904      	add	r1, sp, #16
 8003214:	f3af 8000 	nop.w
 8003218:	1c42      	adds	r2, r0, #1
 800321a:	4606      	mov	r6, r0
 800321c:	d1d6      	bne.n	80031cc <_svfiprintf_r+0x174>
 800321e:	89ab      	ldrh	r3, [r5, #12]
 8003220:	065b      	lsls	r3, r3, #25
 8003222:	f53f af2d 	bmi.w	8003080 <_svfiprintf_r+0x28>
 8003226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003228:	e72c      	b.n	8003084 <_svfiprintf_r+0x2c>
 800322a:	ab03      	add	r3, sp, #12
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	462a      	mov	r2, r5
 8003230:	4638      	mov	r0, r7
 8003232:	4b06      	ldr	r3, [pc, #24]	@ (800324c <_svfiprintf_r+0x1f4>)
 8003234:	a904      	add	r1, sp, #16
 8003236:	f000 f87d 	bl	8003334 <_printf_i>
 800323a:	e7ed      	b.n	8003218 <_svfiprintf_r+0x1c0>
 800323c:	080036be 	.word	0x080036be
 8003240:	080036c4 	.word	0x080036c4
 8003244:	080036c8 	.word	0x080036c8
 8003248:	00000000 	.word	0x00000000
 800324c:	08002fa1 	.word	0x08002fa1

08003250 <_printf_common>:
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	4616      	mov	r6, r2
 8003256:	4698      	mov	r8, r3
 8003258:	688a      	ldr	r2, [r1, #8]
 800325a:	690b      	ldr	r3, [r1, #16]
 800325c:	4607      	mov	r7, r0
 800325e:	4293      	cmp	r3, r2
 8003260:	bfb8      	it	lt
 8003262:	4613      	movlt	r3, r2
 8003264:	6033      	str	r3, [r6, #0]
 8003266:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800326a:	460c      	mov	r4, r1
 800326c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003270:	b10a      	cbz	r2, 8003276 <_printf_common+0x26>
 8003272:	3301      	adds	r3, #1
 8003274:	6033      	str	r3, [r6, #0]
 8003276:	6823      	ldr	r3, [r4, #0]
 8003278:	0699      	lsls	r1, r3, #26
 800327a:	bf42      	ittt	mi
 800327c:	6833      	ldrmi	r3, [r6, #0]
 800327e:	3302      	addmi	r3, #2
 8003280:	6033      	strmi	r3, [r6, #0]
 8003282:	6825      	ldr	r5, [r4, #0]
 8003284:	f015 0506 	ands.w	r5, r5, #6
 8003288:	d106      	bne.n	8003298 <_printf_common+0x48>
 800328a:	f104 0a19 	add.w	sl, r4, #25
 800328e:	68e3      	ldr	r3, [r4, #12]
 8003290:	6832      	ldr	r2, [r6, #0]
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	42ab      	cmp	r3, r5
 8003296:	dc2b      	bgt.n	80032f0 <_printf_common+0xa0>
 8003298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800329c:	6822      	ldr	r2, [r4, #0]
 800329e:	3b00      	subs	r3, #0
 80032a0:	bf18      	it	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	0692      	lsls	r2, r2, #26
 80032a6:	d430      	bmi.n	800330a <_printf_common+0xba>
 80032a8:	4641      	mov	r1, r8
 80032aa:	4638      	mov	r0, r7
 80032ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032b0:	47c8      	blx	r9
 80032b2:	3001      	adds	r0, #1
 80032b4:	d023      	beq.n	80032fe <_printf_common+0xae>
 80032b6:	6823      	ldr	r3, [r4, #0]
 80032b8:	6922      	ldr	r2, [r4, #16]
 80032ba:	f003 0306 	and.w	r3, r3, #6
 80032be:	2b04      	cmp	r3, #4
 80032c0:	bf14      	ite	ne
 80032c2:	2500      	movne	r5, #0
 80032c4:	6833      	ldreq	r3, [r6, #0]
 80032c6:	f04f 0600 	mov.w	r6, #0
 80032ca:	bf08      	it	eq
 80032cc:	68e5      	ldreq	r5, [r4, #12]
 80032ce:	f104 041a 	add.w	r4, r4, #26
 80032d2:	bf08      	it	eq
 80032d4:	1aed      	subeq	r5, r5, r3
 80032d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80032da:	bf08      	it	eq
 80032dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bfc4      	itt	gt
 80032e4:	1a9b      	subgt	r3, r3, r2
 80032e6:	18ed      	addgt	r5, r5, r3
 80032e8:	42b5      	cmp	r5, r6
 80032ea:	d11a      	bne.n	8003322 <_printf_common+0xd2>
 80032ec:	2000      	movs	r0, #0
 80032ee:	e008      	b.n	8003302 <_printf_common+0xb2>
 80032f0:	2301      	movs	r3, #1
 80032f2:	4652      	mov	r2, sl
 80032f4:	4641      	mov	r1, r8
 80032f6:	4638      	mov	r0, r7
 80032f8:	47c8      	blx	r9
 80032fa:	3001      	adds	r0, #1
 80032fc:	d103      	bne.n	8003306 <_printf_common+0xb6>
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003306:	3501      	adds	r5, #1
 8003308:	e7c1      	b.n	800328e <_printf_common+0x3e>
 800330a:	2030      	movs	r0, #48	@ 0x30
 800330c:	18e1      	adds	r1, r4, r3
 800330e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003312:	1c5a      	adds	r2, r3, #1
 8003314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003318:	4422      	add	r2, r4
 800331a:	3302      	adds	r3, #2
 800331c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003320:	e7c2      	b.n	80032a8 <_printf_common+0x58>
 8003322:	2301      	movs	r3, #1
 8003324:	4622      	mov	r2, r4
 8003326:	4641      	mov	r1, r8
 8003328:	4638      	mov	r0, r7
 800332a:	47c8      	blx	r9
 800332c:	3001      	adds	r0, #1
 800332e:	d0e6      	beq.n	80032fe <_printf_common+0xae>
 8003330:	3601      	adds	r6, #1
 8003332:	e7d9      	b.n	80032e8 <_printf_common+0x98>

08003334 <_printf_i>:
 8003334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	7e0f      	ldrb	r7, [r1, #24]
 800333a:	4691      	mov	r9, r2
 800333c:	2f78      	cmp	r7, #120	@ 0x78
 800333e:	4680      	mov	r8, r0
 8003340:	460c      	mov	r4, r1
 8003342:	469a      	mov	sl, r3
 8003344:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800334a:	d807      	bhi.n	800335c <_printf_i+0x28>
 800334c:	2f62      	cmp	r7, #98	@ 0x62
 800334e:	d80a      	bhi.n	8003366 <_printf_i+0x32>
 8003350:	2f00      	cmp	r7, #0
 8003352:	f000 80d3 	beq.w	80034fc <_printf_i+0x1c8>
 8003356:	2f58      	cmp	r7, #88	@ 0x58
 8003358:	f000 80ba 	beq.w	80034d0 <_printf_i+0x19c>
 800335c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003364:	e03a      	b.n	80033dc <_printf_i+0xa8>
 8003366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800336a:	2b15      	cmp	r3, #21
 800336c:	d8f6      	bhi.n	800335c <_printf_i+0x28>
 800336e:	a101      	add	r1, pc, #4	@ (adr r1, 8003374 <_printf_i+0x40>)
 8003370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003374:	080033cd 	.word	0x080033cd
 8003378:	080033e1 	.word	0x080033e1
 800337c:	0800335d 	.word	0x0800335d
 8003380:	0800335d 	.word	0x0800335d
 8003384:	0800335d 	.word	0x0800335d
 8003388:	0800335d 	.word	0x0800335d
 800338c:	080033e1 	.word	0x080033e1
 8003390:	0800335d 	.word	0x0800335d
 8003394:	0800335d 	.word	0x0800335d
 8003398:	0800335d 	.word	0x0800335d
 800339c:	0800335d 	.word	0x0800335d
 80033a0:	080034e3 	.word	0x080034e3
 80033a4:	0800340b 	.word	0x0800340b
 80033a8:	0800349d 	.word	0x0800349d
 80033ac:	0800335d 	.word	0x0800335d
 80033b0:	0800335d 	.word	0x0800335d
 80033b4:	08003505 	.word	0x08003505
 80033b8:	0800335d 	.word	0x0800335d
 80033bc:	0800340b 	.word	0x0800340b
 80033c0:	0800335d 	.word	0x0800335d
 80033c4:	0800335d 	.word	0x0800335d
 80033c8:	080034a5 	.word	0x080034a5
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6032      	str	r2, [r6, #0]
 80033d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033dc:	2301      	movs	r3, #1
 80033de:	e09e      	b.n	800351e <_printf_i+0x1ea>
 80033e0:	6833      	ldr	r3, [r6, #0]
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	1d19      	adds	r1, r3, #4
 80033e6:	6031      	str	r1, [r6, #0]
 80033e8:	0606      	lsls	r6, r0, #24
 80033ea:	d501      	bpl.n	80033f0 <_printf_i+0xbc>
 80033ec:	681d      	ldr	r5, [r3, #0]
 80033ee:	e003      	b.n	80033f8 <_printf_i+0xc4>
 80033f0:	0645      	lsls	r5, r0, #25
 80033f2:	d5fb      	bpl.n	80033ec <_printf_i+0xb8>
 80033f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	da03      	bge.n	8003404 <_printf_i+0xd0>
 80033fc:	232d      	movs	r3, #45	@ 0x2d
 80033fe:	426d      	negs	r5, r5
 8003400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003404:	230a      	movs	r3, #10
 8003406:	4859      	ldr	r0, [pc, #356]	@ (800356c <_printf_i+0x238>)
 8003408:	e011      	b.n	800342e <_printf_i+0xfa>
 800340a:	6821      	ldr	r1, [r4, #0]
 800340c:	6833      	ldr	r3, [r6, #0]
 800340e:	0608      	lsls	r0, r1, #24
 8003410:	f853 5b04 	ldr.w	r5, [r3], #4
 8003414:	d402      	bmi.n	800341c <_printf_i+0xe8>
 8003416:	0649      	lsls	r1, r1, #25
 8003418:	bf48      	it	mi
 800341a:	b2ad      	uxthmi	r5, r5
 800341c:	2f6f      	cmp	r7, #111	@ 0x6f
 800341e:	6033      	str	r3, [r6, #0]
 8003420:	bf14      	ite	ne
 8003422:	230a      	movne	r3, #10
 8003424:	2308      	moveq	r3, #8
 8003426:	4851      	ldr	r0, [pc, #324]	@ (800356c <_printf_i+0x238>)
 8003428:	2100      	movs	r1, #0
 800342a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800342e:	6866      	ldr	r6, [r4, #4]
 8003430:	2e00      	cmp	r6, #0
 8003432:	bfa8      	it	ge
 8003434:	6821      	ldrge	r1, [r4, #0]
 8003436:	60a6      	str	r6, [r4, #8]
 8003438:	bfa4      	itt	ge
 800343a:	f021 0104 	bicge.w	r1, r1, #4
 800343e:	6021      	strge	r1, [r4, #0]
 8003440:	b90d      	cbnz	r5, 8003446 <_printf_i+0x112>
 8003442:	2e00      	cmp	r6, #0
 8003444:	d04b      	beq.n	80034de <_printf_i+0x1aa>
 8003446:	4616      	mov	r6, r2
 8003448:	fbb5 f1f3 	udiv	r1, r5, r3
 800344c:	fb03 5711 	mls	r7, r3, r1, r5
 8003450:	5dc7      	ldrb	r7, [r0, r7]
 8003452:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003456:	462f      	mov	r7, r5
 8003458:	42bb      	cmp	r3, r7
 800345a:	460d      	mov	r5, r1
 800345c:	d9f4      	bls.n	8003448 <_printf_i+0x114>
 800345e:	2b08      	cmp	r3, #8
 8003460:	d10b      	bne.n	800347a <_printf_i+0x146>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	07df      	lsls	r7, r3, #31
 8003466:	d508      	bpl.n	800347a <_printf_i+0x146>
 8003468:	6923      	ldr	r3, [r4, #16]
 800346a:	6861      	ldr	r1, [r4, #4]
 800346c:	4299      	cmp	r1, r3
 800346e:	bfde      	ittt	le
 8003470:	2330      	movle	r3, #48	@ 0x30
 8003472:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003476:	f106 36ff 	addle.w	r6, r6, #4294967295
 800347a:	1b92      	subs	r2, r2, r6
 800347c:	6122      	str	r2, [r4, #16]
 800347e:	464b      	mov	r3, r9
 8003480:	4621      	mov	r1, r4
 8003482:	4640      	mov	r0, r8
 8003484:	f8cd a000 	str.w	sl, [sp]
 8003488:	aa03      	add	r2, sp, #12
 800348a:	f7ff fee1 	bl	8003250 <_printf_common>
 800348e:	3001      	adds	r0, #1
 8003490:	d14a      	bne.n	8003528 <_printf_i+0x1f4>
 8003492:	f04f 30ff 	mov.w	r0, #4294967295
 8003496:	b004      	add	sp, #16
 8003498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	f043 0320 	orr.w	r3, r3, #32
 80034a2:	6023      	str	r3, [r4, #0]
 80034a4:	2778      	movs	r7, #120	@ 0x78
 80034a6:	4832      	ldr	r0, [pc, #200]	@ (8003570 <_printf_i+0x23c>)
 80034a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	6831      	ldr	r1, [r6, #0]
 80034b0:	061f      	lsls	r7, r3, #24
 80034b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80034b6:	d402      	bmi.n	80034be <_printf_i+0x18a>
 80034b8:	065f      	lsls	r7, r3, #25
 80034ba:	bf48      	it	mi
 80034bc:	b2ad      	uxthmi	r5, r5
 80034be:	6031      	str	r1, [r6, #0]
 80034c0:	07d9      	lsls	r1, r3, #31
 80034c2:	bf44      	itt	mi
 80034c4:	f043 0320 	orrmi.w	r3, r3, #32
 80034c8:	6023      	strmi	r3, [r4, #0]
 80034ca:	b11d      	cbz	r5, 80034d4 <_printf_i+0x1a0>
 80034cc:	2310      	movs	r3, #16
 80034ce:	e7ab      	b.n	8003428 <_printf_i+0xf4>
 80034d0:	4826      	ldr	r0, [pc, #152]	@ (800356c <_printf_i+0x238>)
 80034d2:	e7e9      	b.n	80034a8 <_printf_i+0x174>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f023 0320 	bic.w	r3, r3, #32
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	e7f6      	b.n	80034cc <_printf_i+0x198>
 80034de:	4616      	mov	r6, r2
 80034e0:	e7bd      	b.n	800345e <_printf_i+0x12a>
 80034e2:	6833      	ldr	r3, [r6, #0]
 80034e4:	6825      	ldr	r5, [r4, #0]
 80034e6:	1d18      	adds	r0, r3, #4
 80034e8:	6961      	ldr	r1, [r4, #20]
 80034ea:	6030      	str	r0, [r6, #0]
 80034ec:	062e      	lsls	r6, r5, #24
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	d501      	bpl.n	80034f6 <_printf_i+0x1c2>
 80034f2:	6019      	str	r1, [r3, #0]
 80034f4:	e002      	b.n	80034fc <_printf_i+0x1c8>
 80034f6:	0668      	lsls	r0, r5, #25
 80034f8:	d5fb      	bpl.n	80034f2 <_printf_i+0x1be>
 80034fa:	8019      	strh	r1, [r3, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	4616      	mov	r6, r2
 8003500:	6123      	str	r3, [r4, #16]
 8003502:	e7bc      	b.n	800347e <_printf_i+0x14a>
 8003504:	6833      	ldr	r3, [r6, #0]
 8003506:	2100      	movs	r1, #0
 8003508:	1d1a      	adds	r2, r3, #4
 800350a:	6032      	str	r2, [r6, #0]
 800350c:	681e      	ldr	r6, [r3, #0]
 800350e:	6862      	ldr	r2, [r4, #4]
 8003510:	4630      	mov	r0, r6
 8003512:	f000 f859 	bl	80035c8 <memchr>
 8003516:	b108      	cbz	r0, 800351c <_printf_i+0x1e8>
 8003518:	1b80      	subs	r0, r0, r6
 800351a:	6060      	str	r0, [r4, #4]
 800351c:	6863      	ldr	r3, [r4, #4]
 800351e:	6123      	str	r3, [r4, #16]
 8003520:	2300      	movs	r3, #0
 8003522:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003526:	e7aa      	b.n	800347e <_printf_i+0x14a>
 8003528:	4632      	mov	r2, r6
 800352a:	4649      	mov	r1, r9
 800352c:	4640      	mov	r0, r8
 800352e:	6923      	ldr	r3, [r4, #16]
 8003530:	47d0      	blx	sl
 8003532:	3001      	adds	r0, #1
 8003534:	d0ad      	beq.n	8003492 <_printf_i+0x15e>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	079b      	lsls	r3, r3, #30
 800353a:	d413      	bmi.n	8003564 <_printf_i+0x230>
 800353c:	68e0      	ldr	r0, [r4, #12]
 800353e:	9b03      	ldr	r3, [sp, #12]
 8003540:	4298      	cmp	r0, r3
 8003542:	bfb8      	it	lt
 8003544:	4618      	movlt	r0, r3
 8003546:	e7a6      	b.n	8003496 <_printf_i+0x162>
 8003548:	2301      	movs	r3, #1
 800354a:	4632      	mov	r2, r6
 800354c:	4649      	mov	r1, r9
 800354e:	4640      	mov	r0, r8
 8003550:	47d0      	blx	sl
 8003552:	3001      	adds	r0, #1
 8003554:	d09d      	beq.n	8003492 <_printf_i+0x15e>
 8003556:	3501      	adds	r5, #1
 8003558:	68e3      	ldr	r3, [r4, #12]
 800355a:	9903      	ldr	r1, [sp, #12]
 800355c:	1a5b      	subs	r3, r3, r1
 800355e:	42ab      	cmp	r3, r5
 8003560:	dcf2      	bgt.n	8003548 <_printf_i+0x214>
 8003562:	e7eb      	b.n	800353c <_printf_i+0x208>
 8003564:	2500      	movs	r5, #0
 8003566:	f104 0619 	add.w	r6, r4, #25
 800356a:	e7f5      	b.n	8003558 <_printf_i+0x224>
 800356c:	080036cf 	.word	0x080036cf
 8003570:	080036e0 	.word	0x080036e0

08003574 <memmove>:
 8003574:	4288      	cmp	r0, r1
 8003576:	b510      	push	{r4, lr}
 8003578:	eb01 0402 	add.w	r4, r1, r2
 800357c:	d902      	bls.n	8003584 <memmove+0x10>
 800357e:	4284      	cmp	r4, r0
 8003580:	4623      	mov	r3, r4
 8003582:	d807      	bhi.n	8003594 <memmove+0x20>
 8003584:	1e43      	subs	r3, r0, #1
 8003586:	42a1      	cmp	r1, r4
 8003588:	d008      	beq.n	800359c <memmove+0x28>
 800358a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800358e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003592:	e7f8      	b.n	8003586 <memmove+0x12>
 8003594:	4601      	mov	r1, r0
 8003596:	4402      	add	r2, r0
 8003598:	428a      	cmp	r2, r1
 800359a:	d100      	bne.n	800359e <memmove+0x2a>
 800359c:	bd10      	pop	{r4, pc}
 800359e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80035a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80035a6:	e7f7      	b.n	8003598 <memmove+0x24>

080035a8 <_sbrk_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	2300      	movs	r3, #0
 80035ac:	4d05      	ldr	r5, [pc, #20]	@ (80035c4 <_sbrk_r+0x1c>)
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	602b      	str	r3, [r5, #0]
 80035b4:	f7fd f914 	bl	80007e0 <_sbrk>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d102      	bne.n	80035c2 <_sbrk_r+0x1a>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	b103      	cbz	r3, 80035c2 <_sbrk_r+0x1a>
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	20000300 	.word	0x20000300

080035c8 <memchr>:
 80035c8:	4603      	mov	r3, r0
 80035ca:	b510      	push	{r4, lr}
 80035cc:	b2c9      	uxtb	r1, r1
 80035ce:	4402      	add	r2, r0
 80035d0:	4293      	cmp	r3, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	d101      	bne.n	80035da <memchr+0x12>
 80035d6:	2000      	movs	r0, #0
 80035d8:	e003      	b.n	80035e2 <memchr+0x1a>
 80035da:	7804      	ldrb	r4, [r0, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	428c      	cmp	r4, r1
 80035e0:	d1f6      	bne.n	80035d0 <memchr+0x8>
 80035e2:	bd10      	pop	{r4, pc}

080035e4 <memcpy>:
 80035e4:	440a      	add	r2, r1
 80035e6:	4291      	cmp	r1, r2
 80035e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80035ec:	d100      	bne.n	80035f0 <memcpy+0xc>
 80035ee:	4770      	bx	lr
 80035f0:	b510      	push	{r4, lr}
 80035f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035f6:	4291      	cmp	r1, r2
 80035f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035fc:	d1f9      	bne.n	80035f2 <memcpy+0xe>
 80035fe:	bd10      	pop	{r4, pc}

08003600 <_realloc_r>:
 8003600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003604:	4680      	mov	r8, r0
 8003606:	4615      	mov	r5, r2
 8003608:	460c      	mov	r4, r1
 800360a:	b921      	cbnz	r1, 8003616 <_realloc_r+0x16>
 800360c:	4611      	mov	r1, r2
 800360e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003612:	f7ff bc39 	b.w	8002e88 <_malloc_r>
 8003616:	b92a      	cbnz	r2, 8003624 <_realloc_r+0x24>
 8003618:	f7ff fbcc 	bl	8002db4 <_free_r>
 800361c:	2400      	movs	r4, #0
 800361e:	4620      	mov	r0, r4
 8003620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003624:	f000 f81a 	bl	800365c <_malloc_usable_size_r>
 8003628:	4285      	cmp	r5, r0
 800362a:	4606      	mov	r6, r0
 800362c:	d802      	bhi.n	8003634 <_realloc_r+0x34>
 800362e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003632:	d8f4      	bhi.n	800361e <_realloc_r+0x1e>
 8003634:	4629      	mov	r1, r5
 8003636:	4640      	mov	r0, r8
 8003638:	f7ff fc26 	bl	8002e88 <_malloc_r>
 800363c:	4607      	mov	r7, r0
 800363e:	2800      	cmp	r0, #0
 8003640:	d0ec      	beq.n	800361c <_realloc_r+0x1c>
 8003642:	42b5      	cmp	r5, r6
 8003644:	462a      	mov	r2, r5
 8003646:	4621      	mov	r1, r4
 8003648:	bf28      	it	cs
 800364a:	4632      	movcs	r2, r6
 800364c:	f7ff ffca 	bl	80035e4 <memcpy>
 8003650:	4621      	mov	r1, r4
 8003652:	4640      	mov	r0, r8
 8003654:	f7ff fbae 	bl	8002db4 <_free_r>
 8003658:	463c      	mov	r4, r7
 800365a:	e7e0      	b.n	800361e <_realloc_r+0x1e>

0800365c <_malloc_usable_size_r>:
 800365c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003660:	1f18      	subs	r0, r3, #4
 8003662:	2b00      	cmp	r3, #0
 8003664:	bfbc      	itt	lt
 8003666:	580b      	ldrlt	r3, [r1, r0]
 8003668:	18c0      	addlt	r0, r0, r3
 800366a:	4770      	bx	lr

0800366c <_init>:
 800366c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366e:	bf00      	nop
 8003670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003672:	bc08      	pop	{r3}
 8003674:	469e      	mov	lr, r3
 8003676:	4770      	bx	lr

08003678 <_fini>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr
